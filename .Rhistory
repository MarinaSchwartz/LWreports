if(tp_n$n >= 5){
knitr::include_graphics("Lake/output_graphs/total_p_graph.png")
}
#TN Graph
if(tn_n$n >= 5){
total_n_lm = lm(TN ~ Year, data = Lake_2_bymo_TN)
total_n_table = glance(total_n_lm)
trend = if_else(total_n_table$p.value >= 0.05, true = "No trend", false = if_else(total_n_lm[["coefficients"]][["Year"]] > 0 , true = "Increasing", false = "Decreasing"))
plot_title = glue("Total Nitrogen (µg/L) by Year for {Lake_2$Lake[1]} in {Lake_2$County[1]} County")
#label = (glue("p = {signif(total_n_table$p.value, digits = 2)}, R<sup>2</sup> = {signif(total_n_table$r.squared, digits = 2)}, {trend} "))
label2 = (glue("p = {signif(total_n_table$p.value, digits = 2)}, R^2 = {signif(total_n_table$r.squared, digits = 2)}, {trend} "))
maxlim = max(Lake_2$TN)+10
minlim = min(Lake_2$TN)
Lake_2_bymo_TN = Lake_2 %>%
select(-Station)%>%
group_by(Year, na.rm=TRUE)%>%
mutate(TN = as.numeric(TN), na.rm=TRUE) %>%
summarise(TN = gmean(TN), na.rm=TRUE)
total_n_graph = ggplot(data = Lake_2_bymo_TN, aes(x = Year, y = TN)) +
geom_point() +
geom_smooth(
method = "lm",
se = TRUE,
color = "darkgoldenrod2",
alpha=0.15,
linetype = paste(
if_else(total_n_table$p.value <= 0.05,true = "solid", false = "dashed" )
)
) +
labs(title = plot_title, x = "Year", y = "Total Nitrogen (µg/L)",caption=paste0(label2))+
scale_x_continuous(labels=scales::number_format(accuracy=1))+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) +
#geom_richtext(label = label,x = (min(Lake_2$Year, na.rm = TRUE)+5),
#              y =(max(Lake_2$TN, na.rm = TRUE)+5),)+
ylim(minlim, maxlim)
#show(total_n_graph)
##commented out so the graph does not show up twice.
ggsave("Lake/output_graphs/total_n_graph.png", width = 6, height = 4, units = "in", dpi = 300)
}
if(tn_n$n >= 5){
knitr::include_graphics("Lake/output_graphs/total_n_graph.png")
}
#chl Graph
if(chl_n$n >= 5){
total_chl_lm = lm(CHL ~ Year, data = Lake_2_bymo_CHL)
total_chl_table = glance(total_chl_lm)
trend = if_else(total_chl_table$p.value >= 0.05, true = "No trend", false = if_else(total_chl_lm[["coefficients"]][["Year"]] > 0 , true = "Increasing", false = "Decreasing"))
plot_title = glue("Total Chlorophyll (µg/L) by Year for {Lake_2$Lake[1]} in {Lake_2$County[1]} County")
#label = (glue("p = {signif(total_chl_table$p.value, digits = 2)}, R<sup>2</sup> = {signif(total_chl_table$r.squared, digits = 2)}, {trend} "))
label2 = (glue("p = {signif(total_chl_table$p.value, digits = 2)}, R^2 = {signif(total_chl_table$r.squared, digits = 2)}, {trend} "))
maxlim = max(Lake_2$CHL)+10
minlim = min(Lake_2$CHL)
Lake_2_bymo_CHL = Lake_2 %>%
select(-Station)%>%
group_by(Year, na.rm=TRUE)%>%
mutate(CHL = as.numeric(CHL), na.rm=TRUE) %>%
summarise(CHL = gmean(CHL), na.rm=TRUE)
total_chl_graph = ggplot(data = Lake_2_bymo_CHL, aes(x = Year, y = CHL)) +
geom_point() +
geom_smooth(
method = "lm",
se = TRUE,
color = "forestgreen",
alpha=0.15,
linetype = paste(
if_else(total_chl_table$p.value <= 0.05,true = "solid", false = "dashed" )
)
) +
labs(title = plot_title, x = "Year", y = "Total Chlorophyll (µg/L)",caption=label2)+
scale_x_continuous(labels=scales::number_format(accuracy=1))+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) +
#geom_richtext(label = label,x = (min(Lake_2$Year,na.rm = TRUE)+5),
#              y = (max(Lake_2$CHL, na.rm = TRUE)+5),)+
ylim(minlim, maxlim)
#show(total_chl_graph)
##commented out so the graph does not show up twice.
ggsave("Lake/output_graphs/total_chl_graph.png", width = 6, height = 4, units = "in", dpi = 300)
}
if(chl_n$n >= 5){
knitr::include_graphics("Lake/output_graphs/total_chl_graph.png")
}
#Secchi Graph
if(secchi_m_n$n >= 5){
total_secchi_lm = lm(SECCHI_ft ~ Year, data = Lake_2_bymo_SECCHI_ft)
total_secchi_table = glance(total_secchi_lm)
trend = if_else(total_secchi_table$p.value >= 0.05, true = "No trend", false = if_else(total_secchi_lm[["coefficients"]][["Year"]] > 0 , true = "Increasing", false = "Decreasing"))
plot_title = glue("Secchi Depth (ft) by Year for {Lake_2$Lake[1]} in {Lake_2$County[1]} County")
#label = (glue("p = {signif(total_secchi_table$p.value, digits = 2)}, R<sup>2</sup> = {signif(total_secchi_table$r.squared, digits = 2)}, {trend} "))
label2 = (glue("p = {signif(total_secchi_table$p.value, digits = 2)}, R^2 = {signif(total_secchi_table$r.squared, digits = 2)}, {trend} "))
maxlim = max(Lake_2$SECCHI_ft, na.rm = TRUE)+10
minlim = min(Lake_2$SECCHI_ft, na.rm = TRUE)
Lake_2_bymo_SECCHI_ft = Lake_2 %>%
select(-Station)%>%
group_by(Year, na.rm=TRUE)%>%
mutate(SECCHI_ft = as.numeric(SECCHI_ft), na.rm=TRUE) %>%
summarise(SECCHI_ft = gmean(SECCHI_ft), na.rm=TRUE)
total_secchi_graph = ggplot(data = Lake_2_bymo_SECCHI_ft, aes(x = Year, y = SECCHI_ft)) +
geom_point() +
geom_smooth(
method = "lm",
se = TRUE,
color = "dodgerblue3",
alpha=0.15,
linetype = paste(
if_else(total_secchi_table$p.value <= 0.05,true = "solid", false = "dashed" )
)
) +
labs(title = plot_title, x = "Year", y = "Secchi depth (ft)",caption=label2)+
scale_x_continuous(labels=scales::number_format(accuracy=1))+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) +
#geom_richtext(label = label,x = (min(Lake_2$Year, na.rm = TRUE)+5),
#              y = (max(Lake_2$SECCHI_ft, na.rm = TRUE)+5))+
ylim(minlim, maxlim)
#show(total_secchi_graph)
###commented out so the graph does not show up twice.
ggsave("Lake/output_graphs/total_secchi_graph.png", width = 6, height = 4, units = "in", dpi = 300)
}
if(secchi_m_n$n >= 5){
knitr::include_graphics("Lake/output_graphs/total_secchi_graph.png")
}
### Import Libraries ###
###IMPORTING LIBRARIES AND LOADING DATA###
##########################################################################################
#Commenting out this code to add to the for loop file
#importing libraries
library(tidyverse)
library(gt)
library(SciViews)
library(broom)
#broom is just to get values form lm function in easier to reference from
library(glue)
library(ggtext)
#glue and ggtext are for making labels. trying to make labels and get default ggplot functions to correctly parse those labels is a nightmare. ggtext helps by allowing you to use html tags in the labels. glue helps by allowing you to use variables in the labels.
library(readxl)
library(tinytex)
#tinytex::install_tinytex()
#tinytex::tlmgr_update()
#setwd("C:/Users/amber.riner/Documents/LWreports")
### Loading and Preparing Data
data_1 = read_xlsx("Lakewatch Base File RMD.xlsx")
data_1 <- data_1 %>%
mutate(Lake_County = paste(Lake, County)) %>%
filter(Study == "LW") %>%
filter(County == "Sarasota") %>%
filter(`water type` == "Lake" | `water type` == "River/Stream" | `water type` == "Estuary")
head(data_1)
data_2 = read.csv("All_Data_RMD.csv")
data_2 = data_2 %>%
mutate(Station = as.character(Station)) %>%
mutate(Lake_County = paste(Lake, County))
head(data_2)
#add na.ignore here to avoid loop error when no data exists for a lake
data_all <- data_1 %>% full_join(data_2, by = c("Lake_County", "Station"))
head(data_all)
#Lakes = unique(data_1$Lake_County)
Lakes = c("Lake G-20 Sarasota") #run previous line OR this line -EDM
print(Lakes)
n = 1
N = length(Lakes)
### for loop with counter ###
for(l in Lakes){
#subsets data for lake of interest
Lake_1 <- data_1 %>%
filter(Lake_County == l)
Lake_2 <- data_2 %>%
filter(Lake_County == l)
file_name = paste(Lake_2[1], ".pdf")
gmean <- function(x){
xc <- x[!is.na(x)]
xg <- exp(mean(log(xc[xc>0])))
xg <- round(xg)
return(xg)
}
#adding a column using if/else for lake classification
##this code currently has no fallback for if the data is missing.
Lake_2 = Lake_2 %>% mutate(lake_class = ifelse(
gmean(`Color`) > 40, "Colored", ifelse(
gmean(`Color`) <= 40 & gmean(`Cond_uS`) <= 20, "Clear Soft Water","Clear Hard Water")))
#adding a column using if/else for trophic state
Lake_2 = Lake_2 %>% mutate(trophic_state = ifelse(
gmean(CHL) < 3, "Oligotrophic", ifelse(
gmean(CHL) >= 3 & gmean(CHL) < 7, "Mesotrophic", ifelse(
gmean(CHL) >= 7 & gmean(CHL) < 40, "Eutrophic", "Hypereutrophic"))))
if(Lake_1$`water type`[1] == "Lake") {
###change Test.RMD to "LWReport Markdown Code Lake.Rmd"
rmarkdown::render(input = "LWReport Markdown Code Lake.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Lake",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Estuary") {
rmarkdown::render(input = "LWReport Markdown Code Estuary.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Estuary",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "River/Stream") {
rmarkdown::render(input = "LWReport Markdown Code RiverStream.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "RiverStream",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
########################################################
#counter
print(Lake_2$Lake_County[1])
# print(paste(n, "/", N))
# n <- n+1
}
### Lake Reports
### Import Libraries ###
###IMPORTING LIBRARIES AND LOADING DATA###
##########################################################################################
#Commenting out this code to add to the for loop file
#importing libraries
library(tidyverse)
library(gt)
library(SciViews)
library(broom)
#broom is just to get values form lm function in easier to reference from
library(glue)
library(ggtext)
#glue and ggtext are for making labels. trying to make labels and get default ggplot functions to correctly parse those labels is a nightmare. ggtext helps by allowing you to use html tags in the labels. glue helps by allowing you to use variables in the labels.
library(readxl)
library(tinytex)
#tinytex::install_tinytex()
#tinytex::tlmgr_update()
#setwd("C:/Users/amber.riner/Documents/LWreports")
### Loading and Preparing Data
data_1 = read_xlsx("Lakewatch Base File RMD.xlsx")
data_1 <- data_1 %>%
mutate(Lake_County = paste(Lake, County)) %>%
filter(Study == "LW") %>%
filter(County == "Sarasota") %>%
filter(`water type` == "Lake" | `water type` == "River/Stream" | `water type` == "Estuary")
head(data_1)
data_2 = read.csv("All_Data_RMD.csv")
data_2 = data_2 %>%
mutate(Station = as.character(Station)) %>%
mutate(Lake_County = paste(Lake, County))
head(data_2)
#add na.ignore here to avoid loop error when no data exists for a lake
data_all <- data_1 %>% full_join(data_2, by = c("Lake_County", "Station"))
head(data_all)
#Lakes = unique(data_1$Lake_County)
Lakes = c("Lake G-20 Sarasota") #run previous line OR this line -EDM
print(Lakes)
n = 1
N = length(Lakes)
### for loop with counter ###
for(l in Lakes){
#subsets data for lake of interest
Lake_1 <- data_1 %>%
filter(Lake_County == l)
Lake_2 <- data_2 %>%
filter(Lake_County == l)
file_name = paste(Lake_2[1], ".pdf")
gmean <- function(x){
xc <- x[!is.na(x)]
xg <- exp(mean(log(xc[xc>0])))
xg <- round(xg)
return(xg)
}
#adding a column using if/else for lake classification
##this code currently has no fallback for if the data is missing.
Lake_2 = Lake_2 %>% mutate(lake_class = ifelse(
gmean(`Color`) > 40, "Colored", ifelse(
gmean(`Color`) <= 40 & gmean(`Cond_uS`) <= 20, "Clear Soft Water","Clear Hard Water")))
#adding a column using if/else for trophic state
Lake_2 = Lake_2 %>% mutate(trophic_state = ifelse(
gmean(CHL) < 3, "Oligotrophic", ifelse(
gmean(CHL) >= 3 & gmean(CHL) < 7, "Mesotrophic", ifelse(
gmean(CHL) >= 7 & gmean(CHL) < 40, "Eutrophic", "Hypereutrophic"))))
if(Lake_1$`water type`[1] == "Lake") {
###change Test.RMD to "LWReport Markdown Code Lake.Rmd"
rmarkdown::render(input = "LWReport Markdown Code Lake.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Lake",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Estuary") {
rmarkdown::render(input = "LWReport Markdown Code Estuary.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Estuary",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "River/Stream") {
rmarkdown::render(input = "LWReport Markdown Code RiverStream.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "RiverStream",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
########################################################
#counter
print(Lake_2$Lake_County[1])
# print(paste(n, "/", N))
# n <- n+1
}
### Lake Reports
# Project Notes ----
#
### WD and Packages ----
#setwd("/Documents/GitHub/LWreports/.RData")
library(tidyverse)
library(gt)
library(SciViews)
library(broom)
library(glue)
library(ggtext)
library(readxl)
library(tinytex)
#tinytex::install_tinytex()
#tinytex::tlmgr_update()
### Data Import ----
data_1 = read_xlsx("Lakewatch Base File RMD.xlsx")
data_2 = read.csv("All_Data_RMD.csv")
### Functions ----
gmean <- function(x){
xc <- x[!is.na(x)]
xg <- exp(mean(log(xc[xc>0])))
xg <- round(xg)
return(xg)
}
### Data Prep ----
data_1 <- data_1 %>%
mutate(Lake_County = paste(Lake, County)) %>%
filter(Study == "LW") %>%
filter(County == "Collier") %>%
filter(`water type` == "Lake" | `water type` == "River/Stream" | `water type` == "Estuary")
head(data_1)
data_2 = data_2 %>%
mutate(Station = as.character(Station)) %>%
mutate(Lake_County = paste(Lake, County))
head(data_2)
#add na.ignore here to avoid loop error when no data exists for a lake
data_all <- data_1 %>% full_join(data_2, by = c("Lake_County", "Station"))
head(data_all)
### for loop with counter ----
#Run ONE of these tow lines
#Lakes = unique(data_1$Lake_County)
Lakes = c("Quarry Collier","Swan Collier")
print(Lakes)
n_count = 1
N_count = length(Lakes)
for(l in Lakes){
#subsets data for lake of interest
Lake_1 <- data_1 %>%
filter(Lake_County == l)
Lake_2 <- data_2 %>%
filter(Lake_County == l)
file_name = paste(Lake_2[1], ".pdf")
#adding a column using if/else for lake classification
##this code currently has no fallback for if the data is missing.
Lake_2 = Lake_2 %>% mutate(lake_class = ifelse(
gmean(`Color`) > 40, "Colored", ifelse(
gmean(`Color`) <= 40 & gmean(`Cond_uS`) <= 20, "Clear Soft Water","Clear Hard Water")))
#adding a column using if/else for trophic state
Lake_2 = Lake_2 %>% mutate(trophic_state = ifelse(
gmean(CHL) < 3, "Oligotrophic", ifelse(
gmean(CHL) >= 3 & gmean(CHL) < 7, "Mesotrophic", ifelse(
gmean(CHL) >= 7 & gmean(CHL) < 40, "Eutrophic", "Hypereutrophic"))))
if(Lake_1$`water type`[1] == "Lake") {
rmarkdown::render(input = "LWReport Markdown Code Lake.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Lake",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Estuary") {
rmarkdown::render(input = "LWReport Markdown Code Estuary.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Estuary",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "River/Stream") {
rmarkdown::render(input = "LWReport Markdown Code RiverStream.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "RiverStream",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
#counter
print(Lake_2$Lake_County[1])
print(paste(n_count, "/", N_count))
n_count <- n_count+1
}
setwd("~/Documents/GitHub/WIN File Creation")
library(tidyverse)
library(readxl)
library(dplyr)
library(readr)
library(lubridate)
TP <- read_xlsx("Data/Project Coast/TP Stacked.xlsx")
View(TP)
TP <- read_excel("Data/Project Coast/TP Stacked.xlsx")
View(TP)
Secchi <- read_csv("Data/Project Coast/Secchi Stacked.csv")
View(Secchi)
CHL_uncorrected <- read_csv("Data/Project Coast/Chl un Stacked.csv")
View(CHL_uncorrected)
Secchi_Add <- Secchi#_WIN
#mutate('ADAPT Analyte ID' = Secchi$ADAPT_Analyte_ID) %>%
#mutate('Org Analyte Name' = paste("Depth, Secchi Disk Depth")) %>%
#mutate('Activity Type' = paste("Field")) %>%
#mutate('Sample Collection Type' = paste("Field Testing-Discrete")) %>%
#mutate('Sample Collection Equipment' = paste("Misc Field Device")) %>%
#mutate('Activity Depth' = paste("")) %>%
#mutate('Activity Depth Unit' = paste("")) %>%
#mutate('Total Depth' = Secchi$`Total Depth`) %>%
#mutate('Total Depth Unit' = Secchi$Total_Depth_Unit) %>%
#mutate('Analysis Method' = paste("FDEP FT1700")) %>%
#mutate('Sample Fraction' = as.character(paste(""))) %>%
# mutate('Activity_Start_Date' = make_date(month = MM, day = DD, year = yyyy)) %>%
# mutate('Activity_Start_Date' = format(Activity_Start_Date, format = "%D")) %>%
mutate('Activity Start Time' = format(Activity_Start_Time, format = '%I:%M:%S %p')) %>%
#mutate('Preparation Time Zone' = paste("")) %>%
View(Secchi_Add)
View(Secchi_Add)
View(Secchi)
mutate('Activity_Start_Time' = format(Activity_Start_Time, format = '%I:%M:%S %p')) %>%
View(Secchi_Add)
# mutate('Activity_Start_Date' = make_date(month = MM, day = DD, year = yyyy)) %>%
# mutate('Activity_Start_Date' = format(Activity_Start_Date, format = "%D")) %>%
mutate('Activity_Start_Time1' = format(Activity_Start_Time, format = '%I:%M:%S %p')) %>%
#mutate('Preparation Time Zone' = paste("")) %>%
#mutate('Activity_Start_Date' = make_date(month = MM, day = DD, year = YYYY)) %>%
#mutate('Activity_Start_Date' = format(Activity_Start_Date, format = "%D")) %>%
#mutate('Activity_Start_Time' = format(Activity_Start_Time, format = "%R,%p")) %>%
#mutate('Analysis Time Zone' = paste("")) %>%
#mutate('Activity_Start_Date' = make_date(month = MM, day = DD, year = YYYY)) %>%
#mutate('Activity_Start_Date' = format(Activity_Start_Date, format = "%D")) %>%
#mutate('Activity_Start_Time' = format(Activity_Start_Time, format = "%R,%p")) %>%
#mutate('Activity Time Zone' = Secchi$Activity_Time_Zone) %>%
# mutate('Org Result Value' = not_reported_secchi(Secchi_WIN$Org_Result_Value)) %>%
# mutate('Org MDL' = paste("")) %>%
# mutate('Org PQL' = paste("")) %>%
# mutate('Org Detection Unit' = paste("")) %>%
# mutate('Value Qualifier' = s_value_qualifiers) %>%
# mutate('Result Comments' = Secchi_WIN$Result_Comments) %>%
# mutate('Result Value Type Name' = paste("Actual")) %>%
# mutate('Dilution' = paste("")) %>%
select(-County, -Site, -Station, -activity_start_date, -activity_start_time, -analysis_time, -analysis_date, -analysis_start_time, -analysis_start_date)
library(tidyverse)
library(readxl)
library(dplyr)
library(readr)
library(lubridate)
mutate('Activity_Start_Time' = format(Secchi$Activity_Start_Time, format = '%I:%M:%S %p')) %>%
View(Secchi_Add)
mutate('Activity Start Time' = format(Activity_Start_Time, format = '%I:%M:%S %p')) %>%
Secchi_WIN$Project_ID <- "21FLUFSW"
mutate('Activity Start Time' = format(Secchi$Activity_Start_Time, format = '%I:%M:%S %p')) %>%
Secchi_WIN$Project_ID <- "21FLUFSW"
dplyr::mutate('Activity Start Time' = format(Secchi$Activity_Start_Time, format = '%I:%M:%S %p')) %>%
Secchi_WIN$Project_ID <- "21FLUFSW"
lubridate::mutate('Activity Start Time' = format(Secchi$Activity_Start_Time, format = '%I:%M:%S %p')) %>%
Secchi_WIN$Project_ID <- "21FLUFSW"
Secchi_t<-Secchi%>%
select(Activity_Start_Time)%>%
mutate_(Activity_Start_Time,format = '%I:%M:%S %p')
Secchi_t<-Secchi%>%
select(Activity_Start_Time)%>%
### Functions ----
## FOR ALL PARAMETERS ##
# For changing T value qualifiers to U
t_value_qualifiers <- function(Value_Qualifier){
if(Value_Qualifier=="T"){
Value_Qualifier <- "U"
}else if(Value_Qualifier=="TI"){
Value_Qualifier <- "U"
}else if(Value_Qualifier=="QTI"){
Value_Qualifier <- "QU"
}else{
Value_Qualifier <- NA
}
return(Value_Qualifier)
}
Secchi_t<-Secchi%>%
select(Activity_Start_Time)
Secchi_t<-Secchi%>%
select(Activity_Start_Time)
mutate('Activity_Start_Time' = format(Activity_Start_Time, format = "%I:%M:%S %p")) %>%
View(Secchi_t)
View(Secchi_t)
View(Secchi_t)
v1<- c(Secchi$Activity_Start_Time)
x <- lubridate::parse_date_time(v1,'H:M:S')
format(x, format = '%I:%M:%S %p')
Secchi_t<-Secchi%>%
select(Activity_Start_Time)%>%
mutate('Activity_Start_Time' = x)
View(Secchi_t)
Secchi_t<-Secchi%>%
select(Activity_Start_Time)%>%
mutate(format(x, format = '%I:%M:%S %p'))
View(Secchi_t)
TP <- read_csv("Data/Project Coast/TP Stacked.csv")
TN <- read_csv("Data/Project Coast/TN Stacked.csv")
CHL_corrected <- read_csv("Data/Project Coast/Chl cor Stacked.csv")
CHL_uncorrected <- read_csv("Data/Project Coast/Chl un Stacked.csv")
Secchi <- read_csv("Data/Project Coast/Secchi Stacked.csv")
#Changing format of times
# v1<- c(Secchi$Activity_Start_Time)
# x <- lubridate::parse_date_time(v1,'H:M:S')
# format(x, format = '%I:%M:%S %p')
Secchi_t<-Secchi%>%
select(Activity_Start_Time)%>%
mutate(format(x, format = '%I:%M:%S %p'))
View(Secchi_t)
Secchi_t<-Secchi%>%
select(Activity_Start_Time)%>%
mutate('New_Time'=format(x, format = '%I:%M:%S %p'))
View(Secchi_t)
Secchi_t<-Secchi%>%
select(Activity_Start_Time)%>%
mutate('Activity_Start_Time'=format(x, format = '%I:%M:%S %p'))
View(Secchi_t)
Secchi_t<-Secchi%>%
#select(Activity_Start_Time)%>%
mutate('Activity_Start_Time'=format(x, format = '%I:%M:%S %p'))
View(Secchi_t)
