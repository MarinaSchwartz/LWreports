head(data_1)
data_2 = read.csv("All_Data.csv")
data_2 = data_2 %>%
mutate(Station = as.character(Station)) %>%
mutate(Lake_County = paste(Lake, County))
head(data_2)
Lake_1 <- data_1 %>%
filter(Lake_County == l)
lake_2 = data_2
Lake_2 = data_2
lake_1 = data_1
gmean <- function(x){
xc <- x[!is.na(x)]
xg <- exp(mean(log(xc[xc>0])))
xg <- round(xg)
return(xg)
}
#note: these tables work but it has two issues at the moment
##03/17/24, according to
### it is using the min and max value, when we want the min and max mean value across ampling years
#it is also missing the number of sampling years for each variable. i need to work on calculating that. so far i can't figure out how to do that.
#another issue, how does lakewatch handle bottom in thier reports?
data_means = Lake_2%>% group_by(Lake_County) %>% summarise(
"Total Phosphorus (µg/L)" = gmean(TP),
"Total Nitrogen (µg/L)" = gmean(TN),
"Chlorophyll- uncorrected (µg/L)" = gmean(CHL),
"Secchi (ft)" = gmean(SECCHI_ft),
"Secchi (m)" = gmean(SECCHI_ft)*0.3,
"Color (Pt-Co Units)" = gmean(Color),
"Specific Conductance (µS/cm@25 C)" = gmean(Cond_uS),
"Lake Classification" = ""
) %>% pivot_longer(cols = 2:9, names_to = "parameter",values_to = "mean",values_transform = list(mean = as.character)) %>% select(-Lake_County)
data_mins = Lake_2 %>% group_by(Lake_County) %>%  summarise(
"Total Phosphorus (µg/L)" = min(TP, na.rm = TRUE),
"Total Nitrogen (µg/L)" = min(TN, na.rm = TRUE),
"Chlorophyll- uncorrected (µg/L)" = min(CHL, na.rm = TRUE),
"Secchi (ft)" = min(SECCHI_ft, na.rm = TRUE),
"Secchi (m)" = min(SECCHI_ft, na.rm = TRUE)*0.3,
"Color (Pt-Co Units)" = min(Color, na.rm = TRUE),
"Specific Conductance (µS/cm@25 C)" = min(Cond_uS, na.rm = TRUE),
"Lake Classification" = unique(lake_class) #you must use unique on this character column apparently. otherwise it get much longer than it should be.
) %>% pivot_longer(cols = 2:9, names_to = "parameter",values_to = "min",values_transform = list(min = as.character)) %>% select(-Lake_County)
Lake_2 = Lake_2 %>% filter(Lake_County == "Alice Alachua")
data_mins = Lake_2 %>% group_by(Lake_County) %>%  summarise(
"Total Phosphorus (µg/L)" = min(TP, na.rm = TRUE),
"Total Nitrogen (µg/L)" = min(TN, na.rm = TRUE),
"Chlorophyll- uncorrected (µg/L)" = min(CHL, na.rm = TRUE),
"Secchi (ft)" = min(SECCHI_ft, na.rm = TRUE),
"Secchi (m)" = min(SECCHI_ft, na.rm = TRUE)*0.3,
"Color (Pt-Co Units)" = min(Color, na.rm = TRUE),
"Specific Conductance (µS/cm@25 C)" = min(Cond_uS, na.rm = TRUE),
"Lake Classification" = unique(lake_class) #you must use unique on this character column apparently. otherwise it get much longer than it should be.
) %>% pivot_longer(cols = 2:9, names_to = "parameter",values_to = "min",values_transform = list(min = as.character)) %>% select(-Lake_County)
data_max = Lake_2 %>% group_by(Lake_County) %>% summarise(
"Total Phosphorus (µg/L)" = max(TP, na.rm = TRUE),
"Total Nitrogen (µg/L)" = max(TN, na.rm = TRUE),
"Chlorophyll- uncorrected (µg/L)" = max(CHL, na.rm = TRUE),
"Secchi (ft)" = max(SECCHI_ft, na.rm = TRUE),
"Secchi (m)" = max(SECCHI_ft, na.rm = TRUE)*0.3,
"Color (Pt-Co Units)" = max(Color, na.rm = TRUE),
"Specific Conductance (µS/cm@25 C)" = max(Cond_uS, na.rm = TRUE),
"Lake Classification" = ""
) %>% pivot_longer(cols = 2:9, names_to = "parameter", values_to = "max",values_transform = list(max = as.character)) %>% select(-Lake_County)
data_n = Lake_2 %>% group_by(Lake_County) %>% summarise(
"Total Phosphorus (µg/L)" = count(TP, na.rm = TRUE),
"Total Nitrogen (µg/L)" = count(TN, na.rm = TRUE),
"Chlorophyll- uncorrected (µg/L)" = count(CHL, na.rm = TRUE),
"Secchi (ft)" = count(SECCHI_ft, na.rm = TRUE),
"Secchi (m)" = count(SECCHI_ft, na.rm = TRUE),
"Color (Pt-Co Units)" = count(Color, na.rm = TRUE),
"Specific Conductance (µS/cm@25 C)" = count(Cond_uS, na.rm = TRUE),
"Lake Classification" = ""
) %>% pivot_longer(cols = 2:9, names_to = "parameter",values_to = "n",values_transform = list(n = as.character)) %>% select(-Lake_County)
data_n = Lake_2 %>% group_by(Lake_County) %>% summarise(
"Total Phosphorus (µg/L)" = sum(!is.na(TP)),
"Total Nitrogen (µg/L)" = sum(!is.na(TN)),
"Chlorophyll- uncorrected (µg/L)" = sum(!is.na(CHL)),
"Secchi (ft)" = sum(!is.na(SECCHI_ft)),
"Secchi (m)" = sum(!is.na(SECCHI_ft)),
"Color (Pt-Co Units)" = sum(!is.na(Color)),
"Specific Conductance (µS/cm@25 C)" = sum(!is.na(Cond_uS)),
"Lake Classification" = ""
) %>% pivot_longer(cols = 2:9, names_to = "parameter",values_to = "n",values_transform = list(n = as.character)) %>% select(-Lake_County)
View(data_n)
View(Lake_2)
data_n = Lake_2 %>% group_by(Lake_County, Year) %>% summarise(
"Total Phosphorus (µg/L)" = sum(!is.na(TP)),
"Total Nitrogen (µg/L)" = sum(!is.na(TN)),
"Chlorophyll- uncorrected (µg/L)" = sum(!is.na(CHL)),
"Secchi (ft)" = sum(!is.na(SECCHI_ft)),
"Secchi (m)" = sum(!is.na(SECCHI_ft)),
"Color (Pt-Co Units)" = sum(!is.na(Color)),
"Specific Conductance (µS/cm@25 C)" = sum(!is.na(Cond_uS)),
"Lake Classification" = ""
) %>% pivot_longer(cols = 2:9, names_to = "parameter",values_to = "n",values_transform = list(n = as.character)) %>% select(-Lake_County)
View(data_n)
View(Lake_2)
?data_frame
data.frame()
?data.frame()
?tibble()
View(data_max)
tp_n = Lake_2 %>% group_by(Year) %>% filter(!is.na(TP)) %>% summarise(n = n())
View(tp_n)
tp_n = Lake_2 %>% filter(!is.na(TP)) %>% summarise(n = n())
View(tp_n)
tp_n = Lake_2 %>% group_by(Year) %>% filter(!is.na(TP)) %>% summarise(n = distinct(Year))
tp_n = Lake_2 %>% group_by(Year) %>% filter(!is.na(TP)) %>% summarise(n = unique(Year))
View(tp_n)
tp_n = Lake_2 %>% filter(!is.na(TP)) %>% summarise(n = unique(Year))
View(tp_n)
tp_n = Lake_2 %>% filter(!is.na(TP)) %>% summarise(n = distinct(Year))
tp_n = Lake_2 %>% filter(!is.na(TP)) %>% summarise(n = n_distinct(Year))
View(tp_n)
View(Lake_2)
tp_n = Lake_2 %>% filter(!is.na(TP)) %>% summarise(
"Total Phosphorus (µg/L)" = "Total Phosphorus (µg/L)",
n = n_distinct(Year)
)
View(tp_n)
color_n = Lake_2 %>% filter(!is.na(Color)) %>% summarise(
"Color (Pt-Co Units)" = "Color (Pt-Co Units)",
n = n_distinct(Year)
)
View(color_n)
tp_n = Lake_2 %>% filter(!is.na(TP)) %>% summarise(
"Total Phosphorus (µg/L)" = "Total Phosphorus (µg/L)",
n = n_distinct(Year)
)
tn_n = Lake_2 %>% filter(!is.na(TN)) %>% summarise(
"Total Nitrogen (µg/L)" = "Total Nitrogen (µg/L)",
n = n_distinct(Year)
)
chl_n = Lake_2 %>% filter(!is.na(CHL)) %>% summarise(
"Chlorophyll- uncorrected (µg/L)" = "Chlorophyll- uncorrected (µg/L)",
n = n_distinct(Year)
)
secchi_ft_n = Lake_2 %>% filter(!is.na(SECCHI_ft)) %>% summarise(
"Secchi (ft)" = "Secchi (ft)",
n = n_distinct(Year)
)
secchi_m_n = Lake_2 %>% filter(!is.na(SECCHI_ft)) %>% summarise(
"Secchi (m)" = "Secchi (m)",
n = n_distinct(Year)
)
color_n = Lake_2 %>% filter(!is.na(Color)) %>% summarise(
"Color (Pt-Co Units)" = "Color (Pt-Co Units)",
n = n_distinct(Year)
)
cond_n = Lake_2 %>% filter(!is.na(Cond_uS)) %>% summarise(
"Specific Conductance (µS/cm@25 C)" = "Specific Conductance (µS/cm@25 C)",
n = n_distinct(Year)
)
lake_class = Lake_2 %>% summarise(
"Lake Classification" = "Lake Classification",
n = ""
)
data_n = bind_rows(tp_n,tn_n,chl_n,secchi_ft_n,secchi_m_n,color_n,cond_n,lake_class) %>% pivot_longer(cols = 2:3, names_to = "parameter",values_to = "n",values_transform = list(n = as.character)) %>% select(-parameter)
data_n = bind_rows(tp_n, tn_n, chl_n, secchi_ft_n, secchi_m_n, color_n, cond_n, lake_class)
data_n = bind_rows(tp_n, tn_n, chl_n, secchi_ft_n, secchi_m_n, color_n, cond_n)
View(data_n)
data_n = bind_cols(tp_n, tn_n, chl_n, secchi_ft_n, secchi_m_n, color_n, cond_n, lake_class)
View(data_n)
View(tn_n)
tp_n = Lake_2 %>% filter(!is.na(TP)) %>% summarise(
"parameter" = "Total Phosphorus (µg/L)",
n = n_distinct(Year)
)
View(tp_n)
data_n = bind_rows(tp_n, tn_n, chl_n, secchi_ft_n, secchi_m_n, color_n, cond_n, lake_class) %>% select(-parameter) %>% pivot_wider(names_from = parameter, values_from = n)
View(lake_class)
lake_class = Lake_2 %>% summarise(
"parameter" = "Lake Classification",
n = as.numeric("")
)
data_n = bind_rows(tp_n, tn_n, chl_n, secchi_ft_n, secchi_m_n, color_n, cond_n, lake_class) %>% select(-parameter) %>% pivot_wider(names_from = parameter, values_from = n)
data_n = bind_rows(tp_n, tn_n, chl_n, secchi_ft_n, secchi_m_n, color_n, cond_n, lake_class)
View(data_n)
data_n = bind_rows(tp_n, tn_n, chl_n, secchi_ft_n, secchi_m_n, color_n, cond_n, lake_class)
View(data_n)
data_n = bind_cols(tp_n, tn_n, chl_n, secchi_ft_n, secchi_m_n, color_n, cond_n, lake_class, .id = "parameter")
View(data_n)
data_n = bind_rows(tp_n, tn_n, chl_n, secchi_ft_n, secchi_m_n, color_n, cond_n, lake_class, .id = "parameter")
View(data_n)
data_n = bind_rows(tp_n, tn_n, chl_n, secchi_ft_n, secchi_m_n, color_n, cond_n, lake_class, .id = "parameter")
View(data_n)
tp_n = Lake_2 %>% filter(!is.na(TP)) %>% summarise(
"parameter" = "Total Phosphorus (µg/L)",
n = n_distinct(Year)
)
tn_n = Lake_2 %>% filter(!is.na(TN)) %>% summarise(
"parameter" = "Total Nitrogen (µg/L)",
n = n_distinct(Year)
)
chl_n = Lake_2 %>% filter(!is.na(CHL)) %>% summarise(
"parameter" = "Chlorophyll- uncorrected (µg/L)",
n = n_distinct(Year)
)
secchi_ft_n = Lake_2 %>% filter(!is.na(SECCHI_ft)) %>% summarise(
"parameter" = "Secchi (ft)",
n = n_distinct(Year)
)
secchi_m_n = Lake_2 %>% filter(!is.na(SECCHI_ft)) %>% summarise(
"parameter" = "Secchi (m)",
n = n_distinct(Year)
)
color_n = Lake_2 %>% filter(!is.na(Color)) %>% summarise(
"parameter" = "Color (Pt-Co Units)",
n = n_distinct(Year)
)
cond_n = Lake_2 %>% filter(!is.na(Cond_uS)) %>% summarise(
"parameter" = "Specific Conductance (µS/cm@25 C)",
n = n_distinct(Year)
)
lake_class = Lake_2 %>% summarise(
"parameter" = "Lake Classification",
n = as.numeric("")
)
View(lake_class)
data_n = bind_rows(tp_n, tn_n, chl_n, secchi_ft_n, secchi_m_n, color_n, cond_n, lake_class, .id = "parameter")
View(data_n)
data_n = bind_rows(tp_n, tn_n, chl_n, secchi_ft_n, secchi_m_n, color_n, cond_n, lake_class)
View(data_n)
data_combined = full_join(data_combined,data_n, by = "parameter")
data_combined = full_join(data_mins,data_max, by = "parameter")
#note: these tables work but it has two issues at the moment
##03/17/24, according to
### it is using the min and max value, when we want the min and max mean value across ampling years
#it is also missing the number of sampling years for each variable. i need to work on calculating that. so far i can't figure out how to do that.
#another issue, how does lakewatch handle bottom in thier reports?
data_means = Lake_2%>% group_by(Lake_County) %>% summarise(
"Total Phosphorus (µg/L)" = gmean(TP),
"Total Nitrogen (µg/L)" = gmean(TN),
"Chlorophyll- uncorrected (µg/L)" = gmean(CHL),
"Secchi (ft)" = gmean(SECCHI_ft),
"Secchi (m)" = gmean(SECCHI_ft)*0.3,
"Color (Pt-Co Units)" = gmean(Color),
"Specific Conductance (µS/cm@25 C)" = gmean(Cond_uS),
"Lake Classification" = ""
) %>% pivot_longer(cols = 2:9, names_to = "parameter",values_to = "mean",values_transform = list(mean = as.character)) %>% select(-Lake_County)
data_mins = Lake_2 %>% group_by(Lake_County) %>%  summarise(
"Total Phosphorus (µg/L)" = min(TP, na.rm = TRUE),
"Total Nitrogen (µg/L)" = min(TN, na.rm = TRUE),
"Chlorophyll- uncorrected (µg/L)" = min(CHL, na.rm = TRUE),
"Secchi (ft)" = min(SECCHI_ft, na.rm = TRUE),
"Secchi (m)" = min(SECCHI_ft, na.rm = TRUE)*0.3,
"Color (Pt-Co Units)" = min(Color, na.rm = TRUE),
"Specific Conductance (µS/cm@25 C)" = min(Cond_uS, na.rm = TRUE),
"Lake Classification" = unique(lake_class) #you must use unique on this character column apparently. otherwise it get much longer than it should be.
) %>% pivot_longer(cols = 2:9, names_to = "parameter",values_to = "min",values_transform = list(min = as.character)) %>% select(-Lake_County)
data_mins = Lake_2 %>% group_by(Lake_County) %>%  summarise(
"Total Phosphorus (µg/L)" = min(TP, na.rm = TRUE),
"Total Nitrogen (µg/L)" = min(TN, na.rm = TRUE),
"Chlorophyll- uncorrected (µg/L)" = min(CHL, na.rm = TRUE),
"Secchi (ft)" = min(SECCHI_ft, na.rm = TRUE),
"Secchi (m)" = min(SECCHI_ft, na.rm = TRUE)*0.3,
"Color (Pt-Co Units)" = min(Color, na.rm = TRUE),
"Specific Conductance (µS/cm@25 C)" = min(Cond_uS, na.rm = TRUE),
"Lake Classification" = unique(lake_class) #you must use unique on this character column apparently. otherwise it get much longer than it should be.
) %>% pivot_longer(cols = 2:9, names_to = "parameter",values_to = "min",values_transform = list(min = as.character)) %>% select(-Lake_County)
data_means = Lake_2%>% group_by(Lake_County) %>% summarise(
"Total Phosphorus (µg/L)" = gmean(TP),
"Total Nitrogen (µg/L)" = gmean(TN),
"Chlorophyll- uncorrected (µg/L)" = gmean(CHL),
"Secchi (ft)" = gmean(SECCHI_ft),
"Secchi (m)" = gmean(SECCHI_ft)*0.3,
"Color (Pt-Co Units)" = gmean(Color),
"Specific Conductance (µS/cm@25 C)" = gmean(Cond_uS),
"Lake Classification" = ""
) %>% pivot_longer(cols = 2:9, names_to = "parameter",values_to = "mean",values_transform = list(mean = as.character)) %>% select(-Lake_County)
Lake_2 = Lake_2 %>% mutate(lake_class = ifelse(
gmean(`Color`) > 40, "Colored", ifelse(
gmean(`Color`) <= 40 & gmean(`Cond_uS`) <= 20, "Clear Soft Water","Clear Hard Water")))
Lake_2 = Lake_2 %>% mutate(lake_class = ifelse(
gmean(`Color`) > 40, "Colored", ifelse(
gmean(`Color`) <= 40 & gmean(`Cond_uS`) <= 20, "Clear Soft Water","Clear Hard Water")))
View(Lake_2)
data_mins = Lake_2 %>% group_by(Lake_County) %>%  summarise(
"Total Phosphorus (µg/L)" = min(TP, na.rm = TRUE),
"Total Nitrogen (µg/L)" = min(TN, na.rm = TRUE),
"Chlorophyll- uncorrected (µg/L)" = min(CHL, na.rm = TRUE),
"Secchi (ft)" = min(SECCHI_ft, na.rm = TRUE),
"Secchi (m)" = min(SECCHI_ft, na.rm = TRUE)*0.3,
"Color (Pt-Co Units)" = min(Color, na.rm = TRUE),
"Specific Conductance (µS/cm@25 C)" = min(Cond_uS, na.rm = TRUE),
"Lake Classification" = unique(lake_class) #you must use unique on this character column apparently. otherwise it get much longer than it should be.
) %>% pivot_longer(cols = 2:9, names_to = "parameter",values_to = "min",values_transform = list(min = as.character)) %>% select(-Lake_County)
data_max = Lake_2 %>% group_by(Lake_County) %>% summarise(
"Total Phosphorus (µg/L)" = max(TP, na.rm = TRUE),
"Total Nitrogen (µg/L)" = max(TN, na.rm = TRUE),
"Chlorophyll- uncorrected (µg/L)" = max(CHL, na.rm = TRUE),
"Secchi (ft)" = max(SECCHI_ft, na.rm = TRUE),
"Secchi (m)" = max(SECCHI_ft, na.rm = TRUE)*0.3,
"Color (Pt-Co Units)" = max(Color, na.rm = TRUE),
"Specific Conductance (µS/cm@25 C)" = max(Cond_uS, na.rm = TRUE),
"Lake Classification" = ""
) %>% pivot_longer(cols = 2:9, names_to = "parameter", values_to = "max",values_transform = list(max = as.character)) %>% select(-Lake_County)
View(data_n)
data_combined = full_join(data_mins,data_max, by = "parameter")
data_combined = full_join(data_combined,data_means, by = "parameter")
data_combined = full_join(data_combined,data_n, by = "parameter")
View(data_combined)
lake_class_n = Lake_2 %>% summarise(
"parameter" = "Lake Classification",
n = ""
#null placeholder value
)
View(data_mins)
tp_n = Lake_2 %>% filter(!is.na(TP)) %>% summarise(
"parameter" = "Total Phosphorus (µg/L)",
n = as.character(n_distinct(Year))
)
#note: these tables work but it has two issues at the moment
##03/17/24, according to
### it is using the min and max value, when we want the min and max mean value across ampling years
#it is also missing the number of sampling years for each variable. i need to work on calculating that. so far i can't figure out how to do that.
#another issue, how does lakewatch handle bottom in thier reports?
data_means = Lake_2%>% group_by(Lake_County) %>% summarise(
"Total Phosphorus (µg/L)" = gmean(TP),
"Total Nitrogen (µg/L)" = gmean(TN),
"Chlorophyll- uncorrected (µg/L)" = gmean(CHL),
"Secchi (ft)" = gmean(SECCHI_ft),
"Secchi (m)" = gmean(SECCHI_ft)*0.3,
"Color (Pt-Co Units)" = gmean(Color),
"Specific Conductance (µS/cm@25 C)" = gmean(Cond_uS),
"Lake Classification" = ""#null placeholder value
) %>% pivot_longer(cols = 2:9, names_to = "parameter",values_to = "mean",values_transform = list(mean = as.character)) %>% select(-Lake_County)
data_mins = Lake_2 %>% group_by(Lake_County) %>%  summarise(
"Total Phosphorus (µg/L)" = min(TP, na.rm = TRUE),
"Total Nitrogen (µg/L)" = min(TN, na.rm = TRUE),
"Chlorophyll- uncorrected (µg/L)" = min(CHL, na.rm = TRUE),
"Secchi (ft)" = min(SECCHI_ft, na.rm = TRUE),
"Secchi (m)" = min(SECCHI_ft, na.rm = TRUE)*0.3,
"Color (Pt-Co Units)" = min(Color, na.rm = TRUE),
"Specific Conductance (µS/cm@25 C)" = min(Cond_uS, na.rm = TRUE),
"Lake Classification" = unique(lake_class) #you must use unique on this character column apparently. otherwise it get much longer than it should be.
) %>% pivot_longer(cols = 2:9, names_to = "parameter",values_to = "min",values_transform = list(min = as.character)) %>% select(-Lake_County)
data_max = Lake_2 %>% group_by(Lake_County) %>% summarise(
"Total Phosphorus (µg/L)" = max(TP, na.rm = TRUE),
"Total Nitrogen (µg/L)" = max(TN, na.rm = TRUE),
"Chlorophyll- uncorrected (µg/L)" = max(CHL, na.rm = TRUE),
"Secchi (ft)" = max(SECCHI_ft, na.rm = TRUE),
"Secchi (m)" = max(SECCHI_ft, na.rm = TRUE)*0.3,
"Color (Pt-Co Units)" = max(Color, na.rm = TRUE),
"Specific Conductance (µS/cm@25 C)" = max(Cond_uS, na.rm = TRUE),
"Lake Classification" = ""#null placeholder value
) %>% pivot_longer(cols = 2:9, names_to = "parameter", values_to = "max",values_transform = list(max = as.character)) %>% select(-Lake_County)
#count the number of years without na values for each parameter. i couldn't figure out a more eligant way to do this.
#need to convert the n value to a character to combine with lakeclass, which is a character. converting an empty string to a character doesn't work because it yields NA. in our final table, we want the an empty string.
tp_n = Lake_2 %>% filter(!is.na(TP)) %>% summarise(
"parameter" = "Total Phosphorus (µg/L)",
n = as.character(n_distinct(Year))
)
tn_n = Lake_2 %>% filter(!is.na(TN)) %>% summarise(
"parameter" = "Total Nitrogen (µg/L)",
n = as.character(n_distinct(Year))
)
chl_n = Lake_2 %>% filter(!is.na(CHL)) %>% summarise(
"parameter" = "Chlorophyll- uncorrected (µg/L)",
n = as.character(n_distinct(Year))
)
secchi_ft_n = Lake_2 %>% filter(!is.na(SECCHI_ft)) %>% summarise(
"parameter" = "Secchi (ft)",
n = as.character(n_distinct(Year))
)
secchi_m_n = Lake_2 %>% filter(!is.na(SECCHI_ft)) %>% summarise(
"parameter" = "Secchi (m)",
n = as.character(n_distinct(Year))
)
color_n = Lake_2 %>% filter(!is.na(Color)) %>% summarise(
"parameter" = "Color (Pt-Co Units)",
n = as.character(n_distinct(Year))
)
cond_n = Lake_2 %>% filter(!is.na(Cond_uS)) %>% summarise(
"parameter" = "Specific Conductance (µS/cm@25 C)",
n = as.character(n_distinct(Year))
)
lake_class_n = Lake_2 %>% summarise(
"parameter" = "Lake Classification",
n = ""
#null placeholder value
)
data_n = bind_rows(tp_n, tn_n, chl_n, secchi_ft_n, secchi_m_n, color_n, cond_n, lake_class_n)
#data_years = data_test %>% group_by(Lake) %>% summarise(
# "Total Phosphorus (µg/L)" = sum(is.na(TP))
#this is not correct still, work in progress
#%>% pivot_longer(cols = 2:8, names_to = "parameter",values_to = "max") %>% select(-Lake)
data_combined = full_join(data_mins,data_max, by = "parameter")
data_combined = full_join(data_combined,data_means, by = "parameter")
data_combined = full_join(data_combined,data_n, by = "parameter")
table_two <- gt(data = data_combined) %>% cols_label(
parameter = "Parameter",
min = "Minimum<br>Annual Geometric Means",
max = "Maximum<br>Annual Geometric Means",
mean = "Grand<br>Geometric Mean",
.fn = md
) %>% fmt_number(
columns = c(min, max, mean),
decimals = 1
) %>% tab_header(
title = md("**Table 2.** Long-term trophic state data collected monthly by LAKEWATCH volunteers and classification variables color and specific conductance (collected quarterly). Values in bold can be used with Table 1 to evaluate compliance with nutrient criteria."))
#amber figured this out. if we knit using gttable to pdf we get massive issues. this is because GTtable does not support kniting to pdf. if we save as a png file, knitr can knit this png file to the document just fine.
gtsave(table_two, filename = "table_2.png", path = "Lake/output_table")
knitr::include_graphics("Lake/output_table/table_2.png")
### TABLE 3 CODE ###
#total geometric means full data
ggtp <- gmean(Lake_2$`gmean(TP)`)
#total geometric means full data
ggtp <- gmean(Lake_2$TP)
ggtn <- gmean(Lake_2$TN)
ggchl <- gmean(Lake_2$CHL)
ggsec <- gmean(Lake_2$Lake_2)
ggsec <- gmean(Lake_2$SECCHI_ft)
#geometric means by year
byyr <- Lake_2 %>%
group_by(Year) %>%
summarize(gmean(TP), gmean(TN), gmean(CHL), gmean(SECCHI_ft))
### TABLE 3 CODE ###
#total geometric means full data
ggtp <- gmean(Lake_2$TP)
ggtn <- gmean(Lake_2$TN)
ggchl <- gmean(Lake_2$CHL)
ggsec <- gmean(Lake_2$SECCHI_ft)
#geometric means by year
byyr <- Lake_2 %>%
group_by(Year) %>%
summarize(gmean(TP), gmean(TN), gmean(CHL), gmean(SECCHI_ft))
#calculate TSI
tsi_sd <- 60 -14.41*ln(ggsec)
tsi_chl <- 9.81* ln(ggchl) + 30.6
tsi_tp <- 14.42* ln(ggtp) + 4.15
tsi <- mean(tsi_sd, tsi_chl, tsi_tp)
#define variables
cnty <- Lake_2$County[1] #county
name <- Lake_2$Lake[1] #name
pr <- paste(min(Lake_2$Year), " to ", max(Lake_2$Year)) #period of record
lts <- ifelse(tsi < 40 , "Oligotrophic",
(ifelse(tsi < 50 , "Mesotrophic",
(ifelse(tsi < 70, "Eutrophic", "Hypereutrophic")))))  #lake trophic status
tpz <- Lake_1$`TP Zone`[1] #tp zone
Lake_1 = data_1
Lake_1 = filter(Lake_1$Lake_County == "Alice Alachua")
Lake_1 = filter(Lake_County == "Alice Alachua")
View(Lake_1)
Lake_1 = Lake_1 %>% filter(Lake_County == "Alice Alachua")
tpz <- Lake_1$`TP Zone`[1] #tp zone
### TABLE 3 CODE ###
#total geometric means full data
ggtp <- gmean(Lake_2$TP)
ggtn <- gmean(Lake_2$TN)
ggchl <- gmean(Lake_2$CHL)
ggsec <- gmean(Lake_2$SECCHI_ft)
#geometric means by year
byyr <- Lake_2 %>%
group_by(Year) %>%
summarize(gmean(TP), gmean(TN), gmean(CHL), gmean(SECCHI_ft))
#calculate TSI
tsi_sd <- 60 -14.41*ln(ggsec)
tsi_chl <- 9.81* ln(ggchl) + 30.6
tsi_tp <- 14.42* ln(ggtp) + 4.15
tsi <- mean(tsi_sd, tsi_chl, tsi_tp)
#define variables
cnty <- Lake_2$County[1] #county
name <- Lake_2$Lake[1] #name
pr <- paste(min(Lake_2$Year), " to ", max(Lake_2$Year)) #period of record
lts <- ifelse(tsi < 40 , "Oligotrophic",
(ifelse(tsi < 50 , "Mesotrophic",
(ifelse(tsi < 70, "Eutrophic", "Hypereutrophic")))))  #lake trophic status
tpz <- Lake_1$`TP Zone`[1] #tp zone
gtp <- paste(ggtp, "(", min(byyr$`gmean(TP)`), " to ", max(byyr$`gmean(TP)`) , ")" ) #grand total phosphorous
tnz <- Lake_1$`TN Zone`[1]
gtn <- paste(ggtn, "(", min(byyr$`gmean(TN)`), " to ", max(byyr$`gmean(TN)`), ")") #grand tn geomean
gnis <- Lake_1$GNIS_ID[1]
lat <- Lake_1$Latitude[1]
long <- Lake_1$Longitude[1]
wbt <- Lake_1$`water type`[1]
sa <- paste(Lake_1$`SA (hectare)`[1], "ha, ", Lake_1$`SA (acres)`[1], "acres")
### IF Statements (Before I had access to the base file).  Will possible use later
# tpz <- ifelse(ggtp >= 355, "TP6",
#               (ifelse(ggtp >= 252, "TP5",
#                (ifelse(ggtp >= 93, "TP4",
#                 (ifelse(ggtp >= 45, "TP3",
#                  (ifelse(ggtp >= 21, "TP2","TP1"))))))))) #tp zone
# tnz <- ifelse(ggtn >= 2701, "TN6",
#               (ifelse(ggtn >= 1369, "TN5",
#                (ifelse(ggtn >= 1087, "TN4",
#                 (ifelse(ggtn >= 642, "TN3",
#                  (ifelse(ggtn >= 450, "TN2","TN1"))))))))) #tn zone
#add values to array
rowval <- c(cnty, name, gnis, lat, long, wbt, sa, pr, lts, tpz, gtp, tnz, gtn )
#add row names to array
rowname <- c("County", "Name", "GNIS Number", "Latitude", "Longitude", "Water Body Type", "Surface Area (ha and acre)", "Period of Record (year)", "Lake Tophic Status (CHL)", "TP Zone", "Grand TP Geometric Mean Concentration (ug/ L, min, and max.)", "TN Zone", "Grand TN Geometric Mean Concentration (ug/ L, min, and max.)")
#make dataframe with rownames and row values
tbl3df <- data.frame(rowname, rowval)
#make gt table
table_three = gt(tbl3df) %>% tab_options(column_labels.hidden = TRUE) %>% fmt_number(
decimals = 1
) %>% tab_header(
title = md("**Table 3.** Base File Data, long-term nutrient grand geometric means and Nutrient Zone classification listing the 90th percentile concentrations in Figure 1. Values in bold can be used for Nutrient Zone comparisons."))
gtsave(table_three, filename = "table_3.png", path = "Lake/output_table")
knitr::include_graphics("Lake/output_table/table_3.png")
max(data_2$TP)
max(data_2$TP, na.rm = TRUE)
View(data_2)
gear = data_2 %>% filter(Lake_County == "Orange Gear")
View(gear)
gear = data_2 %>% filter(Lake_County == "Gear Orange")
View(gear)
dairy = data_2 %>% filter(Lake_County == "Placid-dairy stormwater Highlands")
View(dairy)
snook = data_2 %>% filter(Lake_County == "Snook Pond Miami-Dade")
View(snook)
