plot_title = glue("Total Chlorophyll (µg/L) by Year for {Lake_2$Lake[1]} in {Lake_2$County[1]} County")
Lake_2_rando_CHL = Lake_2 %>%
mutate(CHL = ifelse(CHL <1, runif(n()), CHL))
Lake_2_bymo_CHL = Lake_2_rando_CHL %>%
select(-Station)%>%
group_by(Year, na.rm=TRUE)%>%
dplyr::summarise(gmean.CHL = gmean(CHL), na.rm=TRUE, SD.CHL = sd(CHL, na.rm=TRUE))
Lake_2_bymo_CHL$ymax = Lake_2_bymo_CHL$gmean.CHL+Lake_2_bymo_CHL$SD.CHL
Lake_2_bymo_CHL$ymin = Lake_2_bymo_CHL$gmean.CHL-Lake_2_bymo_CHL$SD.CHL
total_chl_lm = lm(gmean.CHL ~ Year, data = Lake_2_bymo_CHL)
maxlim = 100
minlim = -50
total_chl_table = glance(total_chl_lm)
trend = if_else(
total_chl_table$p.value >= 0.05,
true = "No trend",
false = if_else(
total_chl_lm[["coefficients"]][["Year"]] > 0 ,
true = "Increasing",
false = "Decreasing"))
#label = (glue("p = {signif(total_chl_table$p.value, digits = 2)}, R<sup>2</sup> = {signif(total_chl_table$r.squared, digits = 2)}, {trend} "))
label2 = (glue("p = {signif(total_chl_table$p.value, digits = 2)}, R^2 = {signif(total_chl_table$r.squared, digits = 2)}, {trend} "))
total_chl_graph = ggplot(data = Lake_2_bymo_CHL, aes(x = Year, y = gmean.CHL)) +
geom_point() +
geom_smooth(
method = "lm",
se = TRUE,
color = "forestgreen",
alpha=0.15,
linetype = paste(
if_else(total_chl_table$p.value <= 0.05,true = "solid", false = "dashed" )
)
) +
labs(title = plot_title, x = "Year", y = "Total Chlorophyll (µg/L)",caption=label2)+
scale_x_continuous(breaks = seq(min(Lake_2_bymo_CHL$Year),
max(Lake_2_bymo_CHL$Year), by = 2),
labels=scales::number_format(accuracy=1))+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
geom_errorbar(aes(ymin=gmean.CHL-SD.CHL, ymax=gmean.CHL+SD.CHL), width=.2, position=position_dodge(.9)) +
ylim(minlim, maxlim)
ggsave("~/Documents/GitHub/LWreports/Output/Lake/output_graphs/total_chl_graph.png", width = 6, height = 4, units = "in", dpi = 300)
}
if(chl_n$n >= 5){
knitr::include_graphics("~/Documents/GitHub/LWreports/Output/Lake/output_graphs//total_chl_graph.png")
}
#CHL Graph
if(chl_n$n >= 5){
plot_title = glue("Total Chlorophyll (µg/L) by Year for {Lake_2$Lake[1]} in {Lake_2$County[1]} County")
Lake_2_rando_CHL = Lake_2 %>%
mutate(CHL = ifelse(CHL <1, runif(n()), CHL))
Lake_2_bymo_CHL = Lake_2_rando_CHL %>%
select(-Station)%>%
group_by(Year, na.rm=TRUE)%>%
dplyr::summarise(gmean.CHL = gmean(CHL), na.rm=TRUE, SD.CHL = sd(CHL, na.rm=TRUE))
Lake_2_bymo_CHL$ymax = Lake_2_bymo_CHL$gmean.CHL+Lake_2_bymo_CHL$SD.CHL
Lake_2_bymo_CHL$ymin = Lake_2_bymo_CHL$gmean.CHL-Lake_2_bymo_CHL$SD.CHL
total_chl_lm = lm(gmean.CHL ~ Year, data = Lake_2_bymo_CHL)
maxlim = 100
minlim = -25
total_chl_table = glance(total_chl_lm)
trend = if_else(
total_chl_table$p.value >= 0.05,
true = "No trend",
false = if_else(
total_chl_lm[["coefficients"]][["Year"]] > 0 ,
true = "Increasing",
false = "Decreasing"))
#label = (glue("p = {signif(total_chl_table$p.value, digits = 2)}, R<sup>2</sup> = {signif(total_chl_table$r.squared, digits = 2)}, {trend} "))
label2 = (glue("p = {signif(total_chl_table$p.value, digits = 2)}, R^2 = {signif(total_chl_table$r.squared, digits = 2)}, {trend} "))
total_chl_graph = ggplot(data = Lake_2_bymo_CHL, aes(x = Year, y = gmean.CHL)) +
geom_point() +
geom_smooth(
method = "lm",
se = TRUE,
color = "forestgreen",
alpha=0.15,
linetype = paste(
if_else(total_chl_table$p.value <= 0.05,true = "solid", false = "dashed" )
)
) +
labs(title = plot_title, x = "Year", y = "Total Chlorophyll (µg/L)",caption=label2)+
scale_x_continuous(breaks = seq(min(Lake_2_bymo_CHL$Year),
max(Lake_2_bymo_CHL$Year), by = 2),
labels=scales::number_format(accuracy=1))+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
geom_errorbar(aes(ymin=gmean.CHL-SD.CHL, ymax=gmean.CHL+SD.CHL), width=.2, position=position_dodge(.9)) +
ylim(minlim, maxlim)
ggsave("~/Documents/GitHub/LWreports/Output/Lake/output_graphs/total_chl_graph.png", width = 6, height = 4, units = "in", dpi = 300)
}
if(chl_n$n >= 5){
knitr::include_graphics("~/Documents/GitHub/LWreports/Output/Lake/output_graphs//total_chl_graph.png")
}
# Project Notes ----
#
### WD and Packages ----
#setwd("/Documents/GitHub/LWreports/.RData")
library(tidyverse)
library(gt)
library(SciViews)
library(broom)
library(glue)
library(ggtext)
library(readxl)
library(tinytex)
#tinytex::install_tinytex()
#tinytex::tlmgr_update()
### Data Import ----
data_1 = read_xlsx("Data/Lakewatch Base File RMD.xlsx")
data_2 = read.csv("Data/All_Data_RMD.csv")
### Functions ----
gmean <- function(x){
xc <- x[!is.na(x)]
xg <- exp(mean(log(xc[xc>0])))
xg <- round(xg)
return(xg)
}
### Data Prep ----
data_1 <- data_1 %>%
mutate(Lake_County = paste(Lake, County)) %>%
filter(Study == "LW") %>%
filter(County == "Seminole") %>%
filter(`water type` == "Lake" | `water type` == "River/Stream" | `water type` == "Estuary"| `water type` == "Spring Boil"| `water type` == "Spring Run"| `water type` == "Dune Lake")
head(data_1)
data_2 = data_2 %>%
mutate(Station = as.character(Station)) %>%
mutate(Lake_County = paste(Lake, County))
head(data_2)
#add na.ignore here to avoid loop error when no data exists for a lake
data_all <- data_1 %>% full_join(data_2, by = c("Lake_County", "Station"))
head(data_all)
### for loop with counter ----
#Run ONE of these two lines
#Lakes = unique(data_1$Lake_County)
Lakes = c("Queens Mirror Seminole")
#           "Miami Springs-2 Seminole",
#           "Miami Springs-3 Seminole")
#  "Grand Haven 18A Flagler",
#  "Grand Haven 28 Flagler",
#  "Grand Haven 4 Flagler",
#  "Grand Haven 5 Flagler",
# "Grand Haven W6 Flagler")
print(Lakes)
n_count = 1
N_count = length(Lakes)
for(l in Lakes){
#subsets data for lake of interest
Lake_1 <- data_1 %>%
filter(Lake_County == l)
Lake_2 <- data_2 %>%
filter(Lake_County == l)
file_name = paste(Lake_2[1], ".pdf")
#adding a column using if/else for lake classification
##this code currently has no fallback for if the data is missing.
Lake_2 = Lake_2 %>% mutate(lake_class = ifelse(
gmean(`Color`) > 40, "Colored", ifelse(
gmean(`Color`) <= 40 & gmean(`Cond_uS`) <= 20, "Clear Soft Water","Clear Hard Water")))
#adding a column using if/else for trophic state
Lake_2 = Lake_2 %>% mutate(trophic_state = ifelse(
gmean(CHL) < 3, "Oligotrophic", ifelse(
gmean(CHL) >= 3 & gmean(CHL) < 7, "Mesotrophic", ifelse(
gmean(CHL) >= 7 & gmean(CHL) < 40, "Eutrophic", "Hypereutrophic"))))
if(Lake_1$`water type`[1] == "Lake") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code Lake.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/Lake",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Dune Lake") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code Lake.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/Lake",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Estuary") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code Estuary.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/Estuary",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "River/Stream") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code RiverStream.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/RiverStream",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Spring Boil") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code RiverStream.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/RiverStream",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Spring Run") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code RiverStream.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/RiverStream",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
#counter
print(Lake_2$Lake_County[1])
print(paste(n_count, "/", N_count))
n_count <- n_count+1
}
# Project Notes ----
#
### WD and Packages ----
#setwd("/Documents/GitHub/LWreports/.RData")
library(tidyverse)
library(gt)
library(SciViews)
library(broom)
library(glue)
library(ggtext)
library(readxl)
library(tinytex)
#tinytex::install_tinytex()
#tinytex::tlmgr_update()
### Data Import ----
data_1 = read_xlsx("Data/Lakewatch Base File RMD.xlsx")
data_2 = read.csv("Data/All_Data_RMD.csv")
### Functions ----
gmean <- function(x){
xc <- x[!is.na(x)]
xg <- exp(mean(log(xc[xc>0])))
xg <- round(xg)
return(xg)
}
### Data Prep ----
data_1 <- data_1 %>%
mutate(Lake_County = paste(Lake, County)) %>%
filter(Study == "LW") %>%
filter(County == "Seminole") %>%
filter(`water type` == "Lake" | `water type` == "River/Stream" | `water type` == "Estuary"| `water type` == "Spring Boil"| `water type` == "Spring Run"| `water type` == "Dune Lake")
head(data_1)
data_2 = data_2 %>%
mutate(Station = as.character(Station)) %>%
mutate(Lake_County = paste(Lake, County))
head(data_2)
#add na.ignore here to avoid loop error when no data exists for a lake
data_all <- data_1 %>% full_join(data_2, by = c("Lake_County", "Station"))
head(data_all)
### for loop with counter ----
#Run ONE of these two lines
#Lakes = unique(data_1$Lake_County)
Lakes = c("Queens Mirror Seminole")
#           "Miami Springs-2 Seminole",
#           "Miami Springs-3 Seminole")
#  "Grand Haven 18A Flagler",
#  "Grand Haven 28 Flagler",
#  "Grand Haven 4 Flagler",
#  "Grand Haven 5 Flagler",
# "Grand Haven W6 Flagler")
print(Lakes)
n_count = 1
N_count = length(Lakes)
for(l in Lakes){
#subsets data for lake of interest
Lake_1 <- data_1 %>%
filter(Lake_County == l)
Lake_2 <- data_2 %>%
filter(Lake_County == l)
file_name = paste(Lake_2[1], ".pdf")
#adding a column using if/else for lake classification
##this code currently has no fallback for if the data is missing.
Lake_2 = Lake_2 %>% mutate(lake_class = ifelse(
gmean(`Color`) > 40, "Colored", ifelse(
gmean(`Color`) <= 40 & gmean(`Cond_uS`) <= 20, "Clear Soft Water","Clear Hard Water")))
#adding a column using if/else for trophic state
Lake_2 = Lake_2 %>% mutate(trophic_state = ifelse(
gmean(CHL) < 3, "Oligotrophic", ifelse(
gmean(CHL) >= 3 & gmean(CHL) < 7, "Mesotrophic", ifelse(
gmean(CHL) >= 7 & gmean(CHL) < 40, "Eutrophic", "Hypereutrophic"))))
if(Lake_1$`water type`[1] == "Lake") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code Lake.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/Lake",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Dune Lake") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code Lake.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/Lake",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Estuary") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code Estuary.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/Estuary",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "River/Stream") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code RiverStream.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/RiverStream",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Spring Boil") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code RiverStream.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/RiverStream",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Spring Run") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code RiverStream.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/RiverStream",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
#counter
print(Lake_2$Lake_County[1])
print(paste(n_count, "/", N_count))
n_count <- n_count+1
}
# Project Notes ----
#
### WD and Packages ----
#setwd("/Documents/GitHub/LWreports/.RData")
library(tidyverse)
library(gt)
library(SciViews)
library(broom)
library(glue)
library(ggtext)
library(readxl)
library(tinytex)
#tinytex::install_tinytex()
#tinytex::tlmgr_update()
### Data Import ----
data_1 = read_xlsx("Data/Lakewatch Base File RMD.xlsx")
data_2 = read.csv("Data/All_Data_RMD.csv")
### Functions ----
gmean <- function(x){
xc <- x[!is.na(x)]
xg <- exp(mean(log(xc[xc>0])))
xg <- round(xg)
return(xg)
}
### Data Prep ----
data_1 <- data_1 %>%
mutate(Lake_County = paste(Lake, County)) %>%
filter(Study == "LW") %>%
filter(County == "Seminole") %>%
filter(`water type` == "Lake" | `water type` == "River/Stream" | `water type` == "Estuary"| `water type` == "Spring Boil"| `water type` == "Spring Run"| `water type` == "Dune Lake")
head(data_1)
data_2 = data_2 %>%
mutate(Station = as.character(Station)) %>%
mutate(Lake_County = paste(Lake, County))
head(data_2)
#add na.ignore here to avoid loop error when no data exists for a lake
data_all <- data_1 %>% full_join(data_2, by = c("Lake_County", "Station"))
head(data_all)
### for loop with counter ----
#Run ONE of these two lines
#Lakes = unique(data_1$Lake_County)
Lakes = c("Queens Mirror Seminole")
#           "Miami Springs-2 Seminole",
#           "Miami Springs-3 Seminole")
#  "Grand Haven 18A Flagler",
#  "Grand Haven 28 Flagler",
#  "Grand Haven 4 Flagler",
#  "Grand Haven 5 Flagler",
# "Grand Haven W6 Flagler")
print(Lakes)
n_count = 1
N_count = length(Lakes)
for(l in Lakes){
#subsets data for lake of interest
Lake_1 <- data_1 %>%
filter(Lake_County == l)
Lake_2 <- data_2 %>%
filter(Lake_County == l)
file_name = paste(Lake_2[1], ".pdf")
#adding a column using if/else for lake classification
##this code currently has no fallback for if the data is missing.
Lake_2 = Lake_2 %>% mutate(lake_class = ifelse(
gmean(`Color`) > 40, "Colored", ifelse(
gmean(`Color`) <= 40 & gmean(`Cond_uS`) <= 20, "Clear Soft Water","Clear Hard Water")))
#adding a column using if/else for trophic state
Lake_2 = Lake_2 %>% mutate(trophic_state = ifelse(
gmean(CHL) < 3, "Oligotrophic", ifelse(
gmean(CHL) >= 3 & gmean(CHL) < 7, "Mesotrophic", ifelse(
gmean(CHL) >= 7 & gmean(CHL) < 40, "Eutrophic", "Hypereutrophic"))))
if(Lake_1$`water type`[1] == "Lake") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code Lake.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/Lake",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Dune Lake") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code Lake.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/Lake",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Estuary") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code Estuary.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/Estuary",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "River/Stream") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code RiverStream.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/RiverStream",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Spring Boil") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code RiverStream.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/RiverStream",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Spring Run") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code RiverStream.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/RiverStream",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
#counter
print(Lake_2$Lake_County[1])
print(paste(n_count, "/", N_count))
n_count <- n_count+1
}
# Project Notes ----
#
### WD and Packages ----
#setwd("/Documents/GitHub/LWreports/.RData")
library(tidyverse)
library(gt)
library(SciViews)
library(broom)
library(glue)
library(ggtext)
library(readxl)
library(tinytex)
#tinytex::install_tinytex()
#tinytex::tlmgr_update()
### Data Import ----
data_1 = read_xlsx("Data/Lakewatch Base File RMD.xlsx")
data_2 = read.csv("Data/All_Data_RMD.csv")
### Functions ----
gmean <- function(x){
xc <- x[!is.na(x)]
xg <- exp(mean(log(xc[xc>0])))
xg <- round(xg)
return(xg)
}
### Data Prep ----
data_1 <- data_1 %>%
mutate(Lake_County = paste(Lake, County)) %>%
filter(Study == "LW") %>%
filter(County == "Liberty") %>%
filter(`water type` == "Lake" | `water type` == "River/Stream" | `water type` == "Estuary"| `water type` == "Spring Boil"| `water type` == "Spring Run"| `water type` == "Dune Lake")
head(data_1)
data_2 = data_2 %>%
mutate(Station = as.character(Station)) %>%
mutate(Lake_County = paste(Lake, County))
head(data_2)
#add na.ignore here to avoid loop error when no data exists for a lake
data_all <- data_1 %>% full_join(data_2, by = c("Lake_County", "Station"))
head(data_all)
### for loop with counter ----
#Run ONE of these two lines
#Lakes = unique(data_1$Lake_County)
Lakes = c("Mystic Liberty")
#           "Miami Springs-2 Seminole",
#           "Miami Springs-3 Seminole")
#  "Grand Haven 18A Flagler",
#  "Grand Haven 28 Flagler",
#  "Grand Haven 4 Flagler",
#  "Grand Haven 5 Flagler",
# "Grand Haven W6 Flagler")
print(Lakes)
n_count = 1
N_count = length(Lakes)
for(l in Lakes){
#subsets data for lake of interest
Lake_1 <- data_1 %>%
filter(Lake_County == l)
Lake_2 <- data_2 %>%
filter(Lake_County == l)
file_name = paste(Lake_2[1], ".pdf")
#adding a column using if/else for lake classification
##this code currently has no fallback for if the data is missing.
Lake_2 = Lake_2 %>% mutate(lake_class = ifelse(
gmean(`Color`) > 40, "Colored", ifelse(
gmean(`Color`) <= 40 & gmean(`Cond_uS`) <= 20, "Clear Soft Water","Clear Hard Water")))
#adding a column using if/else for trophic state
Lake_2 = Lake_2 %>% mutate(trophic_state = ifelse(
gmean(CHL) < 3, "Oligotrophic", ifelse(
gmean(CHL) >= 3 & gmean(CHL) < 7, "Mesotrophic", ifelse(
gmean(CHL) >= 7 & gmean(CHL) < 40, "Eutrophic", "Hypereutrophic"))))
if(Lake_1$`water type`[1] == "Lake") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code Lake.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/Lake",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Dune Lake") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code Lake.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/Lake",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Estuary") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code Estuary.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/Estuary",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "River/Stream") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code RiverStream.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/RiverStream",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Spring Boil") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code RiverStream.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/RiverStream",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Spring Run") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code RiverStream.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/RiverStream",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
#counter
print(Lake_2$Lake_County[1])
print(paste(n_count, "/", N_count))
n_count <- n_count+1
}
