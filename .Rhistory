#make dataframe with rownames and row values
tbl2df <- data.frame(rowname, mins, maxs, ggmean, n)
table_two <- gt(data = tbl2df) %>% fmt_number(
columns = c(mins, maxs, ggmean),
decimals = 1) %>%
tab_options(column_labels.hidden = TRUE) %>%
opt_table_font(
stack = "transitional"
) %>%
tab_style(
style =
cell_text(weight = "bold"),
locations = cells_body(
columns = mins,
rows = 8
)
) %>%  tab_style(
style =
cell_text(weight = "bold"),
locations = cells_body(
columns = ggmean,
rows = 1
)
) %>%  tab_style(
style =
cell_text(weight = "bold"),
locations = cells_body(
columns = ggmean,
rows = 2
)
) %>%  tab_style(
style =
cell_text(weight = "bold"),
locations = cells_body(
columns = ggmean,
rows = 3
)
) %>% tab_header(
title = md("**Table 2.** Long-term trophic state data collected monthly by LAKEWATCH volunteers and classification variables color and specific conductance (collected quarterly). Values in bold can be used with Table 1 to evaluate compliance with nutrient criteria."))
# #make gt table
# table_two = gt(tbl2df) %>% tab_options(column_labels.hidden = TRUE) %>% fmt_number(
#   decimals = 4,drop_trailing_zeros = TRUE,
# ) %>% opt_table_font(
#   stack = "transitional"
# ) %>%  tab_style(
#     style =
#       cell_text(weight = "bold"),
#     locations = cells_body(
#       columns = 2,
#       rows = 10
#     )
# ) %>%  tab_style(
#     style =
#       cell_text(weight = "bold"),
#     locations = cells_body(
#       columns = 2,
#       rows = 11
#     )
# ) %>%  tab_style(
#     style =
#       cell_text(weight = "bold"),
#     locations = cells_body(
#       columns = 2,
#       rows = 12
#     )
# ) %>%  tab_style(
#     style =
#       cell_text(weight = "bold"),
#     locations = cells_body(
#       columns = 2,
#       rows = 13
#     )
# ) %>% tab_header(
#   title = md("**Table 3.** Base File Data, long-term nutrient grand geometric means and Nutrient Zone classification listing the 90th percentile concentrations in Figure 1. Values in bold can be used for Nutrient Zone comparisons."))
### it is using the min and max value, when we want the min and max mean value across ampling years
# data_means = Lake_2%>% group_by(Lake_County) %>% summarise(
#   "Total Phosphorus (µg/L)" = gmean(TP),
#   "Total Nitrogen (µg/L)" = gmean(TN),
#   "Chlorophyll- uncorrected (µg/L)" = gmean(CHL),
#   "Secchi (ft)" = gmean(SECCHI_ft),
#   "Secchi (m)" = gmean(SECCHI_ft)*0.3,
#   "Color (Pt-Co Units)" = gmean(Color),
#   "Specific Conductance (µS/cm@25 C)" = gmean(Cond_uS),
#   "Lake Classification" = ""#null placeholder value
#   ) %>% pivot_longer(cols = 2:9, names_to = "parameter",values_to = "mean",values_transform = list(mean = as.character)) %>% select(-Lake_County)
#
#
#
# data_mins = Lake_2 %>% group_by(Lake_County) %>%  summarise(
#   "Total Phosphorus (µg/L)" = min(TP, na.rm = TRUE),
#   "Total Nitrogen (µg/L)" = min(TN, na.rm = TRUE),
#   "Chlorophyll- uncorrected (µg/L)" = min(CHL, na.rm = TRUE),
#   "Secchi (ft)" = min(SECCHI_ft, na.rm = TRUE),
#   "Secchi (m)" = min(SECCHI_ft, na.rm = TRUE)*0.3,
#   "Color (Pt-Co Units)" = min(Color, na.rm = TRUE),
#   "Specific Conductance (µS/cm@25 C)" = min(Cond_uS, na.rm = TRUE),
#   "Lake Classification" = unique(lake_class) #you must use unique on this character column apparently. otherwise it get much longer than it should be.
#   ) %>% pivot_longer(cols = 2:9, names_to = "parameter",values_to = "min",values_transform = list(min = as.character)) %>% select(-Lake_County)
#
# data_max = Lake_2 %>% group_by(Lake_County) %>% summarise(
#   "Total Phosphorus (µg/L)" = max(TP, na.rm = TRUE),
#   "Total Nitrogen (µg/L)" = max(TN, na.rm = TRUE),
#   "Chlorophyll- uncorrected (µg/L)" = max(CHL, na.rm = TRUE),
#   "Secchi (ft)" = max(SECCHI_ft, na.rm = TRUE),
#   "Secchi (m)" = max(SECCHI_ft, na.rm = TRUE)*0.3,
#   "Color (Pt-Co Units)" = max(Color, na.rm = TRUE),
#   "Specific Conductance (µS/cm@25 C)" = max(Cond_uS, na.rm = TRUE),
#   "Lake Classification" = ""#null placeholder value
#   ) %>% pivot_longer(cols = 2:9, names_to = "parameter", values_to = "max",values_transform = list(max = as.character)) %>% select(-Lake_County)
#
# #count the number of years without na values for each parameter. i couldn't figure out a more eligant way to do this.
# #need to convert the n value to a character to combine with lakeclass, which is a character. converting an empty string to a character doesn't work because it yields NA. in our final table, we want the an empty string.
#
# tp_n = Lake_2 %>% filter(!is.na(TP)) %>% summarise(
#   "parameter" = "Total Phosphorus (µg/L)",
#   n = as.character(n_distinct(Year))
#   )
#
# tn_n = Lake_2 %>% filter(!is.na(TN)) %>% summarise(
#   "parameter" = "Total Nitrogen (µg/L)",
#   n = as.character(n_distinct(Year))
#   )
#
# chl_n = Lake_2 %>% filter(!is.na(CHL)) %>% summarise(
#   "parameter" = "Chlorophyll- uncorrected (µg/L)",
#   n = as.character(n_distinct(Year))
#   )
#
# secchi_ft_n = Lake_2 %>% filter(!is.na(SECCHI_ft)) %>% summarise(
#   "parameter" = "Secchi (ft)",
#   n = as.character(n_distinct(Year))
#   )
#
# secchi_m_n = Lake_2 %>% filter(!is.na(SECCHI_ft)) %>% summarise(
#   "parameter" = "Secchi (m)",
#   n = as.character(n_distinct(Year))
#   )
#
# color_n = Lake_2 %>% filter(!is.na(Color)) %>% summarise(
#   "parameter" = "Color (Pt-Co Units)",
#   n = as.character(n_distinct(Year))
#   )
#
# cond_n = Lake_2 %>% filter(!is.na(Cond_uS)) %>% summarise(
#   "parameter" = "Specific Conductance (µS/cm@25 C)",
#   n = as.character(n_distinct(Year))
#   )
#
# lake_class_n = Lake_2 %>% summarise(
#   "parameter" = "Lake Classification",
#   n = ""
#   #null placeholder value
#   )
#
# data_n = bind_rows(tp_n, tn_n, chl_n, secchi_ft_n, secchi_m_n, color_n, cond_n, lake_class_n)
#
#
#
#
# #data_years = data_test %>% group_by(Lake) %>% summarise(
#  # "Total Phosphorus (µg/L)" = sum(is.na(TP))
#
#  #this is not correct still, work in progress
#  #%>% pivot_longer(cols = 2:8, names_to = "parameter",values_to = "max") %>% select(-Lake)
#
#
#
# data_combined = full_join(data_mins,data_max, by = "parameter")
# data_combined = full_join(data_combined,data_means, by = "parameter")
# data_combined = full_join(data_combined,data_n, by = "parameter")
#
#
# ```
#
# ```{r table_2_gt, echo = FALSE}
# table_two <- gt(data = data_combined) %>% cols_label(
#   parameter = "Parameter",
#   min = "Minimum<br>Annual Geometric Means",
#   max = "Maximum<br>Annual Geometric Means",
#   mean = "Grand<br>Geometric Mean",
#   .fn = md
# ) %>% fmt_number(
#   columns = c(min, max, mean),
#   decimals = 1
# ) %>% opt_table_font(
#   stack = "transitional"
# ) %>%  tab_style(
#     style =
#       cell_text(weight = "bold"),
#     locations = cells_body(
#       columns = min,
#       rows = 8
#     )
# ) %>%  tab_style(
#     style =
#       cell_text(weight = "bold"),
#     locations = cells_body(
#       columns = mean,
#       rows = 1
#     )
# ) %>%  tab_style(
#     style =
#       cell_text(weight = "bold"),
#     locations = cells_body(
#       columns = mean,
#       rows = 2
#     )
# ) %>%  tab_style(
#     style =
#       cell_text(weight = "bold"),
#     locations = cells_body(
#       columns = mean,
#       rows = 3
#     )
# ) %>% tab_header(
#   title = md("**Table 2.** Long-term trophic state data collected monthly by LAKEWATCH volunteers and classification variables color and specific conductance (collected quarterly). Values in bold can be used with Table 1 to evaluate compliance with nutrient criteria."))
table_two
#amber figured this out. if we knit using gttable to pdf we get massive issues. this is because GTtable does not support kniting to pdf. if we save as a png file, knitr can knit this png file to the document just fine.
#gtsave(table_two, filename = "table_2.png", path = "Lake/output_table")
#geometric means by year
byyr <- Lake_2 %>%
mutate(SECCHI_m = SECCHI_ft*.3) %>%
group_by(Year) %>%
summarize(gmean(TP), gmean(TN), gmean(CHL), gmean(SECCHI_ft), gmean(SECCHI_m), gmean(Color), gmean(Cond_uS))
#minimum annual geometric means
mins = c("Minimum Annual Geometric Mean", min(byyr$`gmean(TP)`), min(byyr$`gmean(TN)`), min(byyr$`gmean(CHL)`), min(byyr$`gmean(SECCHI_ft)`), min(byyr$`gmean(SECCHI_m)`), min(byyr$`gmean(Color)`), min(byyr$`gmean(Cond_uS)`), Lake_2$lake_class[1])
#maximum annual geometric means
maxs = c("Maximum Annual Geometric Mean", max(byyr$`gmean(TP)`), max(byyr$`gmean(TN)`), max(byyr$`gmean(CHL)`), max(byyr$`gmean(SECCHI_ft)`), max(byyr$`gmean(SECCHI_m)`), max(byyr$`gmean(Color)`), max(byyr$`gmean(Cond_uS)`), " ")
#grand geometric means
ggmean = c("Grand Geometric Mean", gmean(byyr$`gmean(TP)`), gmean(byyr$`gmean(TN)`), gmean(byyr$`gmean(CHL)`), gmean(byyr$`gmean(SECCHI_ft)`), gmean(.3*byyr$`gmean(SECCHI_ft)`), gmean(byyr$`gmean(Color)`), gmean(byyr$`gmean(Cond_uS)`), " ")
#year counts
n = c("n", length(byyr$`gmean(TP)`[is.na(byyr$`gmean(TP)`)== FALSE]), length(byyr$`gmean(TN)`[is.na(byyr$`gmean(TN)`) == FALSE]), length(byyr$`gmean(CHL)`[ is.na(byyr$`gmean(CHL)`) == FALSE]), length(byyr$`gmean(SECCHI_ft)`[ is.na(byyr$`gmean(SECCHI_ft)`) == FALSE]), length(byyr$`gmean(SECCHI_ft)`[is.na(byyr$`gmean(SECCHI_ft)`) == FALSE]), length(byyr$`gmean(Color)`[ is.na(byyr$`gmean(Color)`) == FALSE]), length(byyr$`gmean(Cond_uS)`[is.na(byyr$`gmean(Cond_uS)`) == FALSE]), " " )
#add row names to array
rowname <- c("Parameter", "Total Phosphorus (µg/L)" , "Total Nitrogen (µg/L)" ,  "Chlorophyll- uncorrected (µg/L)" , "Secchi (ft)" , "Secchi (m)" ,  "Color (Pt-Co Units)" , "Specific Conductance (µS/cm@25 C)" ,  "Lake Classification" )
#make dataframe with rownames and row values
tbl2df <- data.frame(rowname, mins, maxs, ggmean, n)
table_two <- gt(data = tbl2df) %>% fmt_number(
columns = c(mins, maxs, ggmean),
decimals = 1) %>%
tab_options(column_labels.hidden = TRUE) %>%
opt_table_font(
stack = "transitional"
) %>%
tab_style(
style =
cell_text(weight = "bold"),
locations = cells_body(
columns = mins,
rows = 9
)
) %>%  tab_style(
style =
cell_text(weight = "bold"),
locations = cells_body(
columns = ggmean,
rows = 2
)
) %>%  tab_style(
style =
cell_text(weight = "bold"),
locations = cells_body(
columns = ggmean,
rows = 3
)
) %>%  tab_style(
style =
cell_text(weight = "bold"),
locations = cells_body(
columns = ggmean,
rows = 4
)
) %>% tab_header(
title = md("**Table 2.** Long-term trophic state data collected monthly by LAKEWATCH volunteers and classification variables color and specific conductance (collected quarterly). Values in bold can be used with Table 1 to evaluate compliance with nutrient criteria."))
# #make gt table
# table_two = gt(tbl2df) %>% tab_options(column_labels.hidden = TRUE) %>% fmt_number(
#   decimals = 4,drop_trailing_zeros = TRUE,
# ) %>% opt_table_font(
#   stack = "transitional"
# ) %>%  tab_style(
#     style =
#       cell_text(weight = "bold"),
#     locations = cells_body(
#       columns = 2,
#       rows = 10
#     )
# ) %>%  tab_style(
#     style =
#       cell_text(weight = "bold"),
#     locations = cells_body(
#       columns = 2,
#       rows = 11
#     )
# ) %>%  tab_style(
#     style =
#       cell_text(weight = "bold"),
#     locations = cells_body(
#       columns = 2,
#       rows = 12
#     )
# ) %>%  tab_style(
#     style =
#       cell_text(weight = "bold"),
#     locations = cells_body(
#       columns = 2,
#       rows = 13
#     )
# ) %>% tab_header(
#   title = md("**Table 3.** Base File Data, long-term nutrient grand geometric means and Nutrient Zone classification listing the 90th percentile concentrations in Figure 1. Values in bold can be used for Nutrient Zone comparisons."))
### it is using the min and max value, when we want the min and max mean value across ampling years
# data_means = Lake_2%>% group_by(Lake_County) %>% summarise(
#   "Total Phosphorus (µg/L)" = gmean(TP),
#   "Total Nitrogen (µg/L)" = gmean(TN),
#   "Chlorophyll- uncorrected (µg/L)" = gmean(CHL),
#   "Secchi (ft)" = gmean(SECCHI_ft),
#   "Secchi (m)" = gmean(SECCHI_ft)*0.3,
#   "Color (Pt-Co Units)" = gmean(Color),
#   "Specific Conductance (µS/cm@25 C)" = gmean(Cond_uS),
#   "Lake Classification" = ""#null placeholder value
#   ) %>% pivot_longer(cols = 2:9, names_to = "parameter",values_to = "mean",values_transform = list(mean = as.character)) %>% select(-Lake_County)
#
#
#
# data_mins = Lake_2 %>% group_by(Lake_County) %>%  summarise(
#   "Total Phosphorus (µg/L)" = min(TP, na.rm = TRUE),
#   "Total Nitrogen (µg/L)" = min(TN, na.rm = TRUE),
#   "Chlorophyll- uncorrected (µg/L)" = min(CHL, na.rm = TRUE),
#   "Secchi (ft)" = min(SECCHI_ft, na.rm = TRUE),
#   "Secchi (m)" = min(SECCHI_ft, na.rm = TRUE)*0.3,
#   "Color (Pt-Co Units)" = min(Color, na.rm = TRUE),
#   "Specific Conductance (µS/cm@25 C)" = min(Cond_uS, na.rm = TRUE),
#   "Lake Classification" = unique(lake_class) #you must use unique on this character column apparently. otherwise it get much longer than it should be.
#   ) %>% pivot_longer(cols = 2:9, names_to = "parameter",values_to = "min",values_transform = list(min = as.character)) %>% select(-Lake_County)
#
# data_max = Lake_2 %>% group_by(Lake_County) %>% summarise(
#   "Total Phosphorus (µg/L)" = max(TP, na.rm = TRUE),
#   "Total Nitrogen (µg/L)" = max(TN, na.rm = TRUE),
#   "Chlorophyll- uncorrected (µg/L)" = max(CHL, na.rm = TRUE),
#   "Secchi (ft)" = max(SECCHI_ft, na.rm = TRUE),
#   "Secchi (m)" = max(SECCHI_ft, na.rm = TRUE)*0.3,
#   "Color (Pt-Co Units)" = max(Color, na.rm = TRUE),
#   "Specific Conductance (µS/cm@25 C)" = max(Cond_uS, na.rm = TRUE),
#   "Lake Classification" = ""#null placeholder value
#   ) %>% pivot_longer(cols = 2:9, names_to = "parameter", values_to = "max",values_transform = list(max = as.character)) %>% select(-Lake_County)
#
# #count the number of years without na values for each parameter. i couldn't figure out a more eligant way to do this.
# #need to convert the n value to a character to combine with lakeclass, which is a character. converting an empty string to a character doesn't work because it yields NA. in our final table, we want the an empty string.
#
# tp_n = Lake_2 %>% filter(!is.na(TP)) %>% summarise(
#   "parameter" = "Total Phosphorus (µg/L)",
#   n = as.character(n_distinct(Year))
#   )
#
# tn_n = Lake_2 %>% filter(!is.na(TN)) %>% summarise(
#   "parameter" = "Total Nitrogen (µg/L)",
#   n = as.character(n_distinct(Year))
#   )
#
# chl_n = Lake_2 %>% filter(!is.na(CHL)) %>% summarise(
#   "parameter" = "Chlorophyll- uncorrected (µg/L)",
#   n = as.character(n_distinct(Year))
#   )
#
# secchi_ft_n = Lake_2 %>% filter(!is.na(SECCHI_ft)) %>% summarise(
#   "parameter" = "Secchi (ft)",
#   n = as.character(n_distinct(Year))
#   )
#
# secchi_m_n = Lake_2 %>% filter(!is.na(SECCHI_ft)) %>% summarise(
#   "parameter" = "Secchi (m)",
#   n = as.character(n_distinct(Year))
#   )
#
# color_n = Lake_2 %>% filter(!is.na(Color)) %>% summarise(
#   "parameter" = "Color (Pt-Co Units)",
#   n = as.character(n_distinct(Year))
#   )
#
# cond_n = Lake_2 %>% filter(!is.na(Cond_uS)) %>% summarise(
#   "parameter" = "Specific Conductance (µS/cm@25 C)",
#   n = as.character(n_distinct(Year))
#   )
#
# lake_class_n = Lake_2 %>% summarise(
#   "parameter" = "Lake Classification",
#   n = ""
#   #null placeholder value
#   )
#
# data_n = bind_rows(tp_n, tn_n, chl_n, secchi_ft_n, secchi_m_n, color_n, cond_n, lake_class_n)
#
#
#
#
# #data_years = data_test %>% group_by(Lake) %>% summarise(
#  # "Total Phosphorus (µg/L)" = sum(is.na(TP))
#
#  #this is not correct still, work in progress
#  #%>% pivot_longer(cols = 2:8, names_to = "parameter",values_to = "max") %>% select(-Lake)
#
#
#
# data_combined = full_join(data_mins,data_max, by = "parameter")
# data_combined = full_join(data_combined,data_means, by = "parameter")
# data_combined = full_join(data_combined,data_n, by = "parameter")
#
#
# ```
#
# ```{r table_2_gt, echo = FALSE}
# table_two <- gt(data = data_combined) %>% cols_label(
#   parameter = "Parameter",
#   min = "Minimum<br>Annual Geometric Means",
#   max = "Maximum<br>Annual Geometric Means",
#   mean = "Grand<br>Geometric Mean",
#   .fn = md
# ) %>% fmt_number(
#   columns = c(min, max, mean),
#   decimals = 1
# ) %>% opt_table_font(
#   stack = "transitional"
# ) %>%  tab_style(
#     style =
#       cell_text(weight = "bold"),
#     locations = cells_body(
#       columns = min,
#       rows = 8
#     )
# ) %>%  tab_style(
#     style =
#       cell_text(weight = "bold"),
#     locations = cells_body(
#       columns = mean,
#       rows = 1
#     )
# ) %>%  tab_style(
#     style =
#       cell_text(weight = "bold"),
#     locations = cells_body(
#       columns = mean,
#       rows = 2
#     )
# ) %>%  tab_style(
#     style =
#       cell_text(weight = "bold"),
#     locations = cells_body(
#       columns = mean,
#       rows = 3
#     )
# ) %>% tab_header(
#   title = md("**Table 2.** Long-term trophic state data collected monthly by LAKEWATCH volunteers and classification variables color and specific conductance (collected quarterly). Values in bold can be used with Table 1 to evaluate compliance with nutrient criteria."))
table_two
#amber figured this out. if we knit using gttable to pdf we get massive issues. this is because GTtable does not support kniting to pdf. if we save as a png file, knitr can knit this png file to the document just fine.
#gtsave(table_two, filename = "table_2.png", path = "Lake/output_table")
#amber figured this out. if we knit using gttable to pdf we get massive issues. this is because GTtable does not support kniting to pdf. if we save as a png file, knitr can knit this png file to the document just fine.
gtsave(table_two, filename = "table_2.png", path = "Lake/output_table")
knitr::include_graphics("Lake/output_table/table_2.png")
#geometric means by year
byyr <- Lake_2 %>%
mutate(SECCHI_m = SECCHI_ft*.3) %>%
group_by(Year) %>%
summarize(gmean(TP), gmean(TN), gmean(CHL), gmean(SECCHI_ft), gmean(SECCHI_m), gmean(Color), gmean(Cond_uS))
#minimum annual geometric means
mins = c("Minimum Annual Geometric Mean", min(byyr$`gmean(TP)`), min(byyr$`gmean(TN)`), min(byyr$`gmean(CHL)`), min(byyr$`gmean(SECCHI_ft)`), min(byyr$`gmean(SECCHI_m)`), min(byyr$`gmean(Color)`), min(byyr$`gmean(Cond_uS)`), Lake_2$lake_class[1])
#maximum annual geometric means
maxs = c("Maximum Annual Geometric Mean", max(byyr$`gmean(TP)`), max(byyr$`gmean(TN)`), max(byyr$`gmean(CHL)`), max(byyr$`gmean(SECCHI_ft)`), max(byyr$`gmean(SECCHI_m)`), max(byyr$`gmean(Color)`), max(byyr$`gmean(Cond_uS)`), " ")
#grand geometric means
ggmean = c("Grand Geometric Mean", gmean(byyr$`gmean(TP)`), gmean(byyr$`gmean(TN)`), gmean(byyr$`gmean(CHL)`), gmean(byyr$`gmean(SECCHI_ft)`), gmean(.3*byyr$`gmean(SECCHI_ft)`), gmean(byyr$`gmean(Color)`), gmean(byyr$`gmean(Cond_uS)`), " ")
#year counts
n = c("n", length(byyr$`gmean(TP)`[is.na(byyr$`gmean(TP)`)== FALSE]), length(byyr$`gmean(TN)`[is.na(byyr$`gmean(TN)`) == FALSE]), length(byyr$`gmean(CHL)`[ is.na(byyr$`gmean(CHL)`) == FALSE]), length(byyr$`gmean(SECCHI_ft)`[ is.na(byyr$`gmean(SECCHI_ft)`) == FALSE]), length(byyr$`gmean(SECCHI_ft)`[is.na(byyr$`gmean(SECCHI_ft)`) == FALSE]), length(byyr$`gmean(Color)`[ is.na(byyr$`gmean(Color)`) == FALSE]), length(byyr$`gmean(Cond_uS)`[is.na(byyr$`gmean(Cond_uS)`) == FALSE]), " " )
#add row names to array
rowname <- c("Parameter", "Total Phosphorus (µg/L)" , "Total Nitrogen (µg/L)" ,  "Chlorophyll- uncorrected (µg/L)" , "Secchi (ft)" , "Secchi (m)" ,  "Color (Pt-Co Units)" , "Specific Conductance (µS/cm@25 C)" ,  "Lake Classification" )
#make dataframe with rownames and row values
tbl2df <- data.frame(rowname, mins, maxs, ggmean, n)
table_two <- gt(data = tbl2df) %>% fmt_number(
columns = c(mins, maxs, ggmean),
decimals = 1) %>%
tab_options(column_labels.hidden = TRUE) %>%
opt_table_font(
stack = "transitional"
) %>%
tab_style(
style =
cell_text(weight = "bold"),
locations = cells_body(
columns = mins,
rows = 9
)
) %>%  tab_style(
style =
cell_text(weight = "bold"),
locations = cells_body(
columns = ggmean,
rows = 2
)
) %>%  tab_style(
style =
cell_text(weight = "bold"),
locations = cells_body(
columns = ggmean,
rows = 3
)
) %>%  tab_style(
style =
cell_text(weight = "bold"),
locations = cells_body(
columns = ggmean,
rows = 4
)
) %>% tab_header(
title = md("**Table 2.** Long-term trophic state data collected monthly by LAKEWATCH volunteers and classification variables color and specific conductance (collected quarterly). Values in bold can be used with Table 1 to evaluate compliance with nutrient criteria."))
#amber figured this out. if we knit using gttable to pdf we get massive issues. this is because GTtable does not support kniting to pdf. if we save as a png file, knitr can knit this png file to the document just fine.
gtsave(table_two, filename = "table_2.png", path = "Lake/output_table")
