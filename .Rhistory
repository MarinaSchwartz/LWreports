if(Lake_1$`water type`[1] == "Lake") {
###change Test.RMD to "LWReport Markdown Code Lake.Rmd"
rmarkdown::render(input = "LWReport Markdown Code Lake.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Lake",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Estuary") {
rmarkdown::render(input = "LWReport Markdown Code Estuary.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Estuary",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "River/Stream") {
rmarkdown::render(input = "LWReport Markdown Code RiverStream.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "RiverStream",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
########################################################
#counter
print(Lake_2$Lake_County[1])
print(paste(n, "/", N))
n <- n+1
}
### Lake Reports
View(total_p_lm)
View(tp_n)
### Import Libraries ###
###IMPORTING LIBRARIES AND LOADING DATA###
##########################################################################################
#Commenting out this code to add to the for loop file
#importing libraries
library(tidyverse)
library(gt)
library(SciViews)
library(broom)
#broom is just to get values form lm function in easier to reference from
library(glue)
library(ggtext)
#glue and ggtext are for making labels. trying to make labels and get default ggplot functions to correctly parse those labels is a nightmare. ggtext helps by allowing you to use html tags in the labels. glue helps by allowing you to use variables in the labels.
library(readxl)
library(tinytex)
#tinytex::install_tinytex()
#tinytex::tlmgr_update()
#setwd("C:/Users/amber.riner/Documents/LWreports")
### Loading and Preparing Data
data_1 = read_xlsx("Lakewatch Base File 10-24-2023.xlsx")
data_1 <- data_1 %>%
mutate(Lake_County = paste(Lake, County)) %>%
filter(Study == "LW") %>%
filter(County == "Alachua") %>%
filter(`water type` == "Lake" | `water type` == "River/Stream" | `water type` == "Estuary")
head(data_1)
data_2 = read.csv("All_Data.csv")
data_2 = data_2 %>%
mutate(Station = as.character(Station)) %>%
mutate(Lake_County = paste(Lake, County))
head(data_2)
#add na.ignore here to avoid loop error when no data exists for a lake
data_all <- data_1 %>% full_join(data_2, by = c("Lake_County", "Station"))
head(data_all)
#Lakes = unique(data_1$Lake_County)
Lakes = c("Alice Alachua")
print(Lakes)
n = 1
N = length(Lakes)
### for loop with counter ###
for(l in Lakes){
#subsets data for lake of interest
Lake_1 <- data_1 %>%
filter(Lake_County == l)
Lake_2 <- data_2 %>%
filter(Lake_County == l)
file_name = paste(Lake_2[1], ".pdf")
gmean <- function(x){
xc <- x[!is.na(x)]
xg <- exp(mean(log(xc[xc>0])))
xg <- round(xg)
return(xg)
}
#adding a column using if/else for lake classification
##this code currently has no fallback for if the data is missing.
Lake_2 = Lake_2 %>% mutate(lake_class = ifelse(
gmean(`Color`) > 40, "Colored", ifelse(
gmean(`Color`) <= 40 & gmean(`Cond_uS`) <= 20, "Clear Soft Water","Clear Hard Water")))
#adding a column using if/else for trophic state
Lake_2 = Lake_2 %>% mutate(trophic_state = ifelse(
gmean(CHL) < 3, "Oligotrophic", ifelse(
gmean(CHL) >= 3 & gmean(CHL) < 7, "Mesotrophic", ifelse(
gmean(CHL) >= 7 & gmean(CHL) < 40, "Eutrophic", "Hypereutrophic"))))
if(Lake_1$`water type`[1] == "Lake") {
###change Test.RMD to "LWReport Markdown Code Lake.Rmd"
rmarkdown::render(input = "LWReport Markdown Code Lake.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Lake",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Estuary") {
rmarkdown::render(input = "LWReport Markdown Code Estuary.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Estuary",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "River/Stream") {
rmarkdown::render(input = "LWReport Markdown Code RiverStream.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "RiverStream",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
########################################################
#counter
print(Lake_2$Lake_County[1])
print(paste(n, "/", N))
n <- n+1
}
### Lake Reports
#how to list all gtraphs for output here? MS
###if(tp_n$n >= 5){
#TP Graph
#lm for graph to refer to
total_p_lm = lm(TP ~ Year, data = Lake_2)
total_p_table = glance(total_p_lm)
trend = if_else(total_p_table$p.value >= 0.5, true = "No trend", false = if_else(total_p_lm[["coefficients"]][["Year"]] > 0 , true = "Increasing", false = "Decreasing"))
plot_title = glue("Total Phosphorus (µg/L) by Year for {Lake_2$Lake[1]} in {Lake_2$County[1]} County")
label = (glue("p = {signif(total_p_table$p.value, digits = 2)}, R<sup>2</sup> = {signif(total_p_table$r.squared, digits = 2)}, {trend} "))
maxlim = max(Lake_2$TP)+10
minlim = min(Lake_2$TP)
total_p_graph = ggplot(data = Lake_2, aes(x = Year, y = TP)) +
geom_point() +
geom_smooth(
method = "lm",
se = TRUE,
color = "darkcyan",
alpha=0.15,
linetype = paste(
if_else(total_p_table$p.value <= 0.05,true = "solid", false = "dashed" )
)
) +
labs(title = plot_title, x = "Year", y = "Total Phosphorus (µg/L)")+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) + geom_richtext(
label = label
,x = (min(Lake_2$Year, na.rm = TRUE)+5),
y = (max(Lake_2$TP, na.rm = TRUE)+5),
)+ylim(minlim, maxlim)
#show(total_p_graph)
##commented out so the graph does not show up twice.
#we decided to save as a png file due to issues with knitr rendering the graph when knitting. it seems to understand how to knit a png file more consistently.
ggsave("Lake/output_graphs/total_p_graph.png", width = 6, height = 4, units = "in", dpi = 300)
knitr::include_graphics("Lake/output_graphs/total_p_graph.png")
#TN Graph
total_n_lm = lm(TN ~ Year, data = Lake_2)
total_n_table = glance(total_n_lm)
trend = if_else(total_n_table$p.value >= 0.05, true = "No trend", false = if_else(total_n_lm[["coefficients"]][["Year"]] > 0 , true = "Increasing", false = "Decreasing"))
plot_title = glue("Total Nitrogen (µg/L) by Year for {Lake_2$Lake[1]} in {Lake_2$County[1]} County")
label = (glue("p = {signif(total_n_table$p.value, digits = 2)}, R<sup>2</sup> = {signif(total_n_table$r.squared, digits = 2)}, {trend} "))
maxlim = max(Lake_2$TN)+10
minlim = min(Lake_2$TN)
total_n_graph = ggplot(data = Lake_2, aes(x = Year, y = TN)) +
geom_point() +
geom_smooth(
method = "lm",
se = TRUE,
color = "darkgoldenrod2",
alpha=0.15,
linetype = paste(
if_else(total_n_table$p.value <= 0.5,true = "solid", false = "dashed" )
)
) +
labs(title = plot_title, x = "Year", y = "Total Nitrogen (µg/L)")+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) + geom_richtext(
label = label
,x = (min(Lake_2$Year, na.rm = TRUE)+5),
y = (max(Lake_2$TN, na.rm = TRUE)+5),
)+ylim(minlim, maxlim)
#show(total_n_graph)
##commented out so the graph does not show up twice.
ggsave("Lake/output_graphs/total_n_graph.png", width = 6, height = 4, units = "in", dpi = 300)
knitr::include_graphics("Lake/output_graphs/total_n_graph.png")
knitr::include_graphics("Lake/output_graphs/total_p_graph.png")
#TN Graph
total_n_lm = lm(TN ~ Year, data = Lake_2)
total_n_table = glance(total_n_lm)
trend = if_else(total_n_table$p.value >= 0.05, true = "No trend", false = if_else(total_n_lm[["coefficients"]][["Year"]] > 0 , true = "Increasing", false = "Decreasing"))
plot_title = glue("Total Nitrogen (µg/L) by Year for {Lake_2$Lake[1]} in {Lake_2$County[1]} County")
label = (glue("p = {signif(total_n_table$p.value, digits = 2)}, R<sup>2</sup> = {signif(total_n_table$r.squared, digits = 2)}, {trend} "))
maxlim = max(Lake_2$TN)+10
minlim = min(Lake_2$TN)
total_n_graph = ggplot(data = Lake_2, aes(x = Year, y = TN)) +
geom_point() +
geom_smooth(
method = "lm",
se = TRUE,
color = "darkgoldenrod2",
alpha=0.15,
linetype = paste(
if_else(total_n_table$p.value <= 0.5,true = "solid", false = "dashed" )
)
) +
labs(title = plot_title, x = "Year", y = "Total Nitrogen (µg/L)")+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) + geom_richtext(
label = label
,x = (min(Lake_2$Year, na.rm = TRUE)+5),
y = (max(Lake_2$TN, na.rm = TRUE)+5),
)+ylim(minlim, maxlim)
#show(total_n_graph)
##commented out so the graph does not show up twice.
ggsave("Lake/output_graphs/total_n_graph.png", width = 6, height = 4, units = "in", dpi = 300)
knitr::include_graphics("Lake/output_graphs/total_n_graph.png")
#how to list all gtraphs for output here? MS
###if(tp_n$n >= 5){
#TP Graph
#lm for graph to refer to
total_p_lm = lm(TP ~ Year, data = Lake_2)
total_p_table = glance(total_p_lm)
trend = if_else(total_p_table$p.value >= 0.5, true = "No trend", false = if_else(total_p_lm[["coefficients"]][["Year"]] > 0 , true = "Increasing", false = "Decreasing"))
plot_title = glue("Total Phosphorus (µg/L) by Year for {Lake_2$Lake[1]} in {Lake_2$County[1]} County")
label = (glue("p = {signif(total_p_table$p.value, digits = 2)}, R<sup>2</sup> = {signif(total_p_table$r.squared, digits = 2)}, {trend} "))
maxlim = max(Lake_2$TP)+10
minlim = min(Lake_2$TP)
total_p_graph = ggplot(data = Lake_2, aes(x = Year, y = TP)) +
geom_point() +
geom_smooth(
method = "lm",
se = TRUE,
color = "darkcyan",
alpha=0.15,
linetype = paste(
if_else(total_p_table$p.value <= 0.05,true = "solid", false = "dashed" )
)
) +
labs(title = plot_title, x = "Year", y = "Total Phosphorus (µg/L)")+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) + geom_richtext(
label = label
,x = (min(Lake_2$Year, na.rm = TRUE)+5),
y = (max(Lake_2$TP, na.rm = TRUE)+5),
)+ylim(minlim, maxlim)
#show(total_p_graph)
##commented out so the graph does not show up twice.
#we decided to save as a png file due to issues with knitr rendering the graph when knitting. it seems to understand how to knit a png file more consistently.
ggsave("Lake/output_graphs/total_p_graph.png", width = 6, height = 4, units = "in", dpi = 300)
knitr::include_graphics("Lake/output_graphs/total_p_graph.png")
#TN Graph
total_n_lm = lm(TN ~ Year, data = Lake_2)
total_n_table = glance(total_n_lm)
trend = if_else(total_n_table$p.value >= 0.05, true = "No trend", false = if_else(total_n_lm[["coefficients"]][["Year"]] > 0 , true = "Increasing", false = "Decreasing"))
plot_title = glue("Total Nitrogen (µg/L) by Year for {Lake_2$Lake[1]} in {Lake_2$County[1]} County")
label = (glue("p = {signif(total_n_table$p.value, digits = 2)}, R<sup>2</sup> = {signif(total_n_table$r.squared, digits = 2)}, {trend} "))
maxlim = max(Lake_2$TN)+10
minlim = min(Lake_2$TN)
total_n_graph = ggplot(data = Lake_2, aes(x = Year, y = TN)) +
geom_point() +
geom_smooth(
method = "lm",
se = TRUE,
color = "darkgoldenrod2",
alpha=0.15,
linetype = paste(
if_else(total_n_table$p.value <= 0.5,true = "solid", false = "dashed" )
)
) +
labs(title = plot_title, x = "Year", y = "Total Nitrogen (µg/L)")+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) + geom_richtext(
label = label
,x = (min(Lake_2$Year, na.rm = TRUE)+5),
y = (max(Lake_2$TN, na.rm = TRUE)+5),
)+ylim(minlim, maxlim)
#show(total_n_graph)
##commented out so the graph does not show up twice.
ggsave("Lake/output_graphs/total_n_graph.png", width = 6, height = 4, units = "in", dpi = 300)
knitr::include_graphics("Lake/output_graphs/total_n_graph.png")
knitr::include_graphics("Lake/output_graphs/total_p_graph.png")
knitr::include_graphics("Lake/output_graphs/total_p_graph.png")
#how to list all gtraphs for output here? MS
###if(tp_n$n >= 5){
#TP Graph
#lm for graph to refer to
total_p_lm = lm(TP ~ Year, data = Lake_2)
total_p_table = glance(total_p_lm)
trend = if_else(total_p_table$p.value >= 0.5, true = "No trend", false = if_else(total_p_lm[["coefficients"]][["Year"]] > 0 , true = "Increasing", false = "Decreasing"))
plot_title = glue("Total Phosphorus (µg/L) by Year for {Lake_2$Lake[1]} in {Lake_2$County[1]} County")
label = (glue("p = {signif(total_p_table$p.value, digits = 2)}, R<sup>2</sup> = {signif(total_p_table$r.squared, digits = 2)}, {trend} "))
maxlim = max(Lake_2$TP)+10
minlim = min(Lake_2$TP)
total_p_graph = ggplot(data = Lake_2, aes(x = Year, y = TP)) +
geom_point() +
geom_smooth(
method = "lm",
se = TRUE,
color = "darkcyan",
alpha=0.15,
linetype = paste(
if_else(total_p_table$p.value <= 0.05,true = "solid", false = "dashed" )
)
) +
labs(title = plot_title, x = "Year", y = "Total Phosphorus (µg/L)")+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) + geom_richtext(
label = label
,x = (min(Lake_2$Year, na.rm = TRUE)+5),
y = (max(Lake_2$TP, na.rm = TRUE)+5),
)+ylim(minlim, maxlim)
#show(total_p_graph)
##commented out so the graph does not show up twice.
#we decided to save as a png file due to issues with knitr rendering the graph when knitting. it seems to understand how to knit a png file more consistently.
ggsave("Lake/output_graphs/total_p_graph.png", width = 6, height = 4, units = "in", dpi = 300)
knitr::include_graphics("Lake/output_graphs/total_p_graph.png")
#TN Graph
total_n_lm = lm(TN ~ Year, data = Lake_2)
total_n_table = glance(total_n_lm)
trend = if_else(total_n_table$p.value >= 0.05, true = "No trend", false = if_else(total_n_lm[["coefficients"]][["Year"]] > 0 , true = "Increasing", false = "Decreasing"))
plot_title = glue("Total Nitrogen (µg/L) by Year for {Lake_2$Lake[1]} in {Lake_2$County[1]} County")
label = (glue("p = {signif(total_n_table$p.value, digits = 2)}, R<sup>2</sup> = {signif(total_n_table$r.squared, digits = 2)}, {trend} "))
maxlim = max(Lake_2$TN)+10
minlim = min(Lake_2$TN)
total_n_graph = ggplot(data = Lake_2, aes(x = Year, y = TN)) +
geom_point() +
geom_smooth(
method = "lm",
se = TRUE,
color = "darkgoldenrod2",
alpha=0.15,
linetype = paste(
if_else(total_n_table$p.value <= 0.5,true = "solid", false = "dashed" )
)
) +
labs(title = plot_title, x = "Year", y = "Total Nitrogen (µg/L)")+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) + geom_richtext(
label = label
,x = (min(Lake_2$Year, na.rm = TRUE)+5),
y = (max(Lake_2$TN, na.rm = TRUE)+5),
)+ylim(minlim, maxlim)
#show(total_n_graph)
##commented out so the graph does not show up twice.
ggsave("Lake/output_graphs/total_n_graph.png", width = 6, height = 4, units = "in", dpi = 300)
knitr::include_graphics("Lake/output_graphs/total_n_graph.png")
knitr::include_graphics("Lake/output_graphs/total_chl_graph.png")
knitr::include_graphics("Lake/output_graphs/total_chl_graph.png")
knitr::include_graphics("Lake/output_graphs/total_chl_graph.png")
knitr::include_graphics("Lake/output_graphs/total_secchi_graph.png")
### Import Libraries ###
###IMPORTING LIBRARIES AND LOADING DATA###
##########################################################################################
#Commenting out this code to add to the for loop file
#importing libraries
library(tidyverse)
library(gt)
library(SciViews)
library(broom)
#broom is just to get values form lm function in easier to reference from
library(glue)
library(ggtext)
#glue and ggtext are for making labels. trying to make labels and get default ggplot functions to correctly parse those labels is a nightmare. ggtext helps by allowing you to use html tags in the labels. glue helps by allowing you to use variables in the labels.
library(readxl)
library(tinytex)
#tinytex::install_tinytex()
#tinytex::tlmgr_update()
#setwd("C:/Users/amber.riner/Documents/LWreports")
### Loading and Preparing Data
data_1 = read_xlsx("Lakewatch Base File 10-24-2023.xlsx")
data_1 <- data_1 %>%
mutate(Lake_County = paste(Lake, County)) %>%
filter(Study == "LW") %>%
filter(County == "Collier") %>%
filter(`water type` == "Lake" | `water type` == "River/Stream" | `water type` == "Estuary")
head(data_1)
data_2 = read.csv("All_Data.csv")
data_2 = data_2 %>%
mutate(Station = as.character(Station)) %>%
mutate(Lake_County = paste(Lake, County))
head(data_2)
#add na.ignore here to avoid loop error when no data exists for a lake
data_all <- data_1 %>% full_join(data_2, by = c("Lake_County", "Station"))
head(data_all)
#Lakes = unique(data_1$Lake_County)
Lakes = c("Quarry Collier")
print(Lakes)
n = 1
N = length(Lakes)
### for loop with counter ###
for(l in Lakes){
#subsets data for lake of interest
Lake_1 <- data_1 %>%
filter(Lake_County == l)
Lake_2 <- data_2 %>%
filter(Lake_County == l)
file_name = paste(Lake_2[1], ".pdf")
gmean <- function(x){
xc <- x[!is.na(x)]
xg <- exp(mean(log(xc[xc>0])))
xg <- round(xg)
return(xg)
}
#adding a column using if/else for lake classification
##this code currently has no fallback for if the data is missing.
Lake_2 = Lake_2 %>% mutate(lake_class = ifelse(
gmean(`Color`) > 40, "Colored", ifelse(
gmean(`Color`) <= 40 & gmean(`Cond_uS`) <= 20, "Clear Soft Water","Clear Hard Water")))
#adding a column using if/else for trophic state
Lake_2 = Lake_2 %>% mutate(trophic_state = ifelse(
gmean(CHL) < 3, "Oligotrophic", ifelse(
gmean(CHL) >= 3 & gmean(CHL) < 7, "Mesotrophic", ifelse(
gmean(CHL) >= 7 & gmean(CHL) < 40, "Eutrophic", "Hypereutrophic"))))
if(Lake_1$`water type`[1] == "Lake") {
###change Test.RMD to "LWReport Markdown Code Lake.Rmd"
rmarkdown::render(input = "LWReport Markdown Code Lake.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Lake",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Estuary") {
rmarkdown::render(input = "LWReport Markdown Code Estuary.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Estuary",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "River/Stream") {
rmarkdown::render(input = "LWReport Markdown Code RiverStream.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "RiverStream",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
########################################################
#counter
print(Lake_2$Lake_County[1])
print(paste(n, "/", N))
n <- n+1
}
### Lake Reports
### Import Libraries ###
###IMPORTING LIBRARIES AND LOADING DATA###
##########################################################################################
#Commenting out this code to add to the for loop file
#importing libraries
library(tidyverse)
library(gt)
library(SciViews)
library(broom)
#broom is just to get values form lm function in easier to reference from
library(glue)
library(ggtext)
#glue and ggtext are for making labels. trying to make labels and get default ggplot functions to correctly parse those labels is a nightmare. ggtext helps by allowing you to use html tags in the labels. glue helps by allowing you to use variables in the labels.
library(readxl)
library(tinytex)
#tinytex::install_tinytex()
#tinytex::tlmgr_update()
#setwd("C:/Users/amber.riner/Documents/LWreports")
### Loading and Preparing Data
data_1 = read_xlsx("Lakewatch Base File 10-24-2023.xlsx")
data_1 <- data_1 %>%
mutate(Lake_County = paste(Lake, County)) %>%
filter(Study == "LW") %>%
filter(County == "Collier") %>%
filter(`water type` == "Lake" | `water type` == "River/Stream" | `water type` == "Estuary")
head(data_1)
data_2 = read.csv("All_Data.csv")
data_2 = data_2 %>%
mutate(Station = as.character(Station)) %>%
mutate(Lake_County = paste(Lake, County))
head(data_2)
#add na.ignore here to avoid loop error when no data exists for a lake
data_all <- data_1 %>% full_join(data_2, by = c("Lake_County", "Station"))
head(data_all)
#Lakes = unique(data_1$Lake_County)
Lakes = c("Quarry Collier")
print(Lakes)
n = 1
N = length(Lakes)
### for loop with counter ###
for(l in Lakes){
#subsets data for lake of interest
Lake_1 <- data_1 %>%
filter(Lake_County == l)
Lake_2 <- data_2 %>%
filter(Lake_County == l)
file_name = paste(Lake_2[1], ".pdf")
gmean <- function(x){
xc <- x[!is.na(x)]
xg <- exp(mean(log(xc[xc>0])))
xg <- round(xg)
return(xg)
}
#adding a column using if/else for lake classification
##this code currently has no fallback for if the data is missing.
Lake_2 = Lake_2 %>% mutate(lake_class = ifelse(
gmean(`Color`) > 40, "Colored", ifelse(
gmean(`Color`) <= 40 & gmean(`Cond_uS`) <= 20, "Clear Soft Water","Clear Hard Water")))
#adding a column using if/else for trophic state
Lake_2 = Lake_2 %>% mutate(trophic_state = ifelse(
gmean(CHL) < 3, "Oligotrophic", ifelse(
gmean(CHL) >= 3 & gmean(CHL) < 7, "Mesotrophic", ifelse(
gmean(CHL) >= 7 & gmean(CHL) < 40, "Eutrophic", "Hypereutrophic"))))
if(Lake_1$`water type`[1] == "Lake") {
###change Test.RMD to "LWReport Markdown Code Lake.Rmd"
rmarkdown::render(input = "LWReport Markdown Code Lake.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Lake",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Estuary") {
rmarkdown::render(input = "LWReport Markdown Code Estuary.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Estuary",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "River/Stream") {
rmarkdown::render(input = "LWReport Markdown Code RiverStream.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "RiverStream",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
########################################################
#counter
print(Lake_2$Lake_County[1])
print(paste(n, "/", N))
n <- n+1
}
### Lake Reports
