params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Estuary") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code Estuary.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/Estuary",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "River/Stream") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code RiverStream.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/RiverStream",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
#counter
print(Lake_2$Lake_County[1])
print(paste(n_count, "/", N_count))
n_count <- n_count+1
}
table_three <- gt(data = data_combined) %>% cols_label(
parameter = "Parameter",
min = "Minimum<br>Annual Geometric Means",
max = "Maximum<br>Annual Geometric Means",
mean = "Grand<br>Geometric Mean",
.fn = md
) %>% fmt_number(
columns = c(min, max, mean),
decimals = 1
) %>% opt_table_font(
stack = "transitional"
) %>% tab_header(
title = md("**Table 2.** Long-term trophic state data collected monthly by LAKEWATCH volunteers and color and specific conductance (collected quarterly)."))
#amber figured this out. if we knit using gttable to pdf we get massive issues. this is because GTtable does not support kniting to pdf. if we save as a png file, knitr can knit this png file to the document just fine.
gtsave(table_two, filename = "table_2.png", path = "~/Documents/GitHub/LWreports/Output/estuary/output_table")
table_three <- gt(data = data_combined) %>% cols_label(
parameter = "Parameter",
min = "Minimum<br>Annual Geometric Means",
max = "Maximum<br>Annual Geometric Means",
mean = "Grand<br>Geometric Mean",
.fn = md
) %>% fmt_number(
columns = c(min, max, mean),
decimals = 1
) %>% opt_table_font(
stack = "transitional"
) %>% tab_header(
title = md("**Table 2.** Long-term trophic state data collected monthly by LAKEWATCH volunteers and color and specific conductance (collected quarterly)."))
#amber figured this out. if we knit using gttable to pdf we get massive issues. this is because GTtable does not support kniting to pdf. if we save as a png file, knitr can knit this png file to the document just fine.
gtsave(table_two, filename = "table_2.png", path = "~/Documents/GitHub/LWreports/Output/Estuary/output_table")
knitr::include_graphics("~/Documents/GitHub/LWreports/Output/Estuary/output_table/table_2.png")
table_three <- gt(data = data_combined) %>% cols_label(
parameter = "Parameter",
min = "Minimum<br>Annual Geometric Means",
max = "Maximum<br>Annual Geometric Means",
mean = "Grand<br>Geometric Mean",
.fn = md
) %>% fmt_number(
columns = c(min, max, mean),
decimals = 1
) %>% opt_table_font(
stack = "transitional"
) %>% tab_header(
title = md("**Table 2.** Long-term trophic state data collected monthly by LAKEWATCH volunteers and color and specific conductance (collected quarterly)."))
#amber figured this out. if we knit using gttable to pdf we get massive issues. this is because GTtable does not support kniting to pdf. if we save as a png file, knitr can knit this png file to the document just fine.
gtsave(table_two, filename = "table_2.png", path = "~/Documents/GitHub/LWreports/Output/Estuary/output_table")
table_three <- gt(data = data_combined) %>% cols_label(
parameter = "Parameter",
min = "Minimum<br>Annual Geometric Means",
max = "Maximum<br>Annual Geometric Means",
mean = "Grand<br>Geometric Mean",
.fn = md
) %>% fmt_number(
columns = c(min, max, mean),
decimals = 1
) %>% opt_table_font(
stack = "transitional"
) %>% tab_header(
title = md("**Table 2.** Long-term trophic state data collected monthly by LAKEWATCH volunteers and color and specific conductance (collected quarterly)."))
#amber figured this out. if we knit using gttable to pdf we get massive issues. this is because GTtable does not support kniting to pdf. if we save as a png file, knitr can knit this png file to the document just fine.
gtsave(table_three, filename = "table_2.png", path = "~/Documents/GitHub/LWreports/Output/Estuary/output_table")
knitr::include_graphics("~/Documents/GitHub/LWreports/Output/Estuary/output_table/table_2.png")
# Project Notes ----
#
### WD and Packages ----
#setwd("/Documents/GitHub/LWreports/.RData")
library(tidyverse)
library(gt)
library(SciViews)
library(broom)
library(glue)
library(ggtext)
library(readxl)
library(tinytex)
#tinytex::install_tinytex()
#tinytex::tlmgr_update()
### Data Import ----
data_1 = read_xlsx("Data/Lakewatch Base File RMD.xlsx")
data_2 = read.csv("Data/All_Data_RMD.csv")
### Functions ----
gmean <- function(x){
xc <- x[!is.na(x)]
xg <- exp(mean(log(xc[xc>0])))
xg <- round(xg)
return(xg)
}
### Data Prep ----
data_1 <- data_1 %>%
mutate(Lake_County = paste(Lake, County)) %>%
filter(Study == "LW") %>%
filter(County == "Monroe") %>%
filter(`water type` == "Lake" | `water type` == "River/Stream" | `water type` == "Estuary")
head(data_1)
data_2 = data_2 %>%
mutate(Station = as.character(Station)) %>%
mutate(Lake_County = paste(Lake, County))
head(data_2)
#add na.ignore here to avoid loop error when no data exists for a lake
data_all <- data_1 %>% full_join(data_2, by = c("Lake_County", "Station"))
head(data_all)
### for loop with counter ----
#Run ONE of these two lines
#Lakes = unique(data_1$Lake_County)
Lakes = c("Cudjoe-3 Monroe",
"Cudjoe-4 Monroe",
"Cudjoe-5 Monroe",
"Cudjoe-7 Monroe",
"Cudjoe-8 Monroe",
"Cudjoe-9 Monroe",
"Cudjoe-10 Monroe",
"Cudjoe-11 Monroe",
"Cudjoe-12 Monroe",
"Cudjoe-13 Monroe")
print(Lakes)
n_count = 1
N_count = length(Lakes)
for(l in Lakes){
#subsets data for lake of interest
Lake_1 <- data_1 %>%
filter(Lake_County == l)
Lake_2 <- data_2 %>%
filter(Lake_County == l)
file_name = paste(Lake_2[1], ".pdf")
#adding a column using if/else for lake classification
##this code currently has no fallback for if the data is missing.
Lake_2 = Lake_2 %>% mutate(lake_class = ifelse(
gmean(`Color`) > 40, "Colored", ifelse(
gmean(`Color`) <= 40 & gmean(`Cond_uS`) <= 20, "Clear Soft Water","Clear Hard Water")))
#adding a column using if/else for trophic state
Lake_2 = Lake_2 %>% mutate(trophic_state = ifelse(
gmean(CHL) < 3, "Oligotrophic", ifelse(
gmean(CHL) >= 3 & gmean(CHL) < 7, "Mesotrophic", ifelse(
gmean(CHL) >= 7 & gmean(CHL) < 40, "Eutrophic", "Hypereutrophic"))))
if(Lake_1$`water type`[1] == "Lake") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code Lake.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/Lake",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Estuary") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code Estuary.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/Estuary",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "River/Stream") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code RiverStream.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/RiverStream",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
#counter
print(Lake_2$Lake_County[1])
print(paste(n_count, "/", N_count))
n_count <- n_count+1
}
# Project Notes ----
#
### WD and Packages ----
#setwd("/Documents/GitHub/LWreports/.RData")
library(tidyverse)
library(gt)
library(SciViews)
library(broom)
library(glue)
library(ggtext)
library(readxl)
library(tinytex)
#tinytex::install_tinytex()
#tinytex::tlmgr_update()
### Data Import ----
data_1 = read_xlsx("Data/Lakewatch Base File RMD.xlsx")
data_2 = read.csv("Data/All_Data_RMD.csv")
### Functions ----
gmean <- function(x){
xc <- x[!is.na(x)]
xg <- exp(mean(log(xc[xc>0])))
xg <- round(xg)
return(xg)
}
### Data Prep ----
data_1 <- data_1 %>%
mutate(Lake_County = paste(Lake, County)) %>%
filter(Study == "LW") %>%
filter(County == "Monroe") %>%
filter(`water type` == "Lake" | `water type` == "River/Stream" | `water type` == "Estuary")
head(data_1)
data_2 = data_2 %>%
mutate(Station = as.character(Station)) %>%
mutate(Lake_County = paste(Lake, County))
head(data_2)
#add na.ignore here to avoid loop error when no data exists for a lake
data_all <- data_1 %>% full_join(data_2, by = c("Lake_County", "Station"))
head(data_all)
### for loop with counter ----
#Run ONE of these two lines
#Lakes = unique(data_1$Lake_County)
Lakes = c("Cudjoe-3 Monroe",
"Cudjoe-4 Monroe",
"Cudjoe-5 Monroe",
"Cudjoe-7 Monroe",
"Cudjoe-8 Monroe",
"Cudjoe-9 Monroe",
"Cudjoe-10 Monroe",
"Cudjoe-11 Monroe",
"Cudjoe-12 Monroe",
"Cudjoe-13 Monroe")
print(Lakes)
n_count = 1
N_count = length(Lakes)
for(l in Lakes){
#subsets data for lake of interest
Lake_1 <- data_1 %>%
filter(Lake_County == l)
Lake_2 <- data_2 %>%
filter(Lake_County == l)
file_name = paste(Lake_2[1], ".pdf")
#adding a column using if/else for lake classification
##this code currently has no fallback for if the data is missing.
Lake_2 = Lake_2 %>% mutate(lake_class = ifelse(
gmean(`Color`) > 40, "Colored", ifelse(
gmean(`Color`) <= 40 & gmean(`Cond_uS`) <= 20, "Clear Soft Water","Clear Hard Water")))
#adding a column using if/else for trophic state
Lake_2 = Lake_2 %>% mutate(trophic_state = ifelse(
gmean(CHL) < 3, "Oligotrophic", ifelse(
gmean(CHL) >= 3 & gmean(CHL) < 7, "Mesotrophic", ifelse(
gmean(CHL) >= 7 & gmean(CHL) < 40, "Eutrophic", "Hypereutrophic"))))
if(Lake_1$`water type`[1] == "Lake") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code Lake.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/Lake",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Estuary") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code Estuary.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/Estuary",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "River/Stream") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code RiverStream.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/RiverStream",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
#counter
print(Lake_2$Lake_County[1])
print(paste(n_count, "/", N_count))
n_count <- n_count+1
}
# Project Notes ----
#
### WD and Packages ----
#setwd("/Documents/GitHub/LWreports/.RData")
library(tidyverse)
library(gt)
library(SciViews)
library(broom)
library(glue)
library(ggtext)
library(readxl)
library(tinytex)
#tinytex::install_tinytex()
#tinytex::tlmgr_update()
### Data Import ----
data_1 = read_xlsx("Data/Lakewatch Base File RMD.xlsx")
data_2 = read.csv("Data/All_Data_RMD.csv")
### Functions ----
gmean <- function(x){
xc <- x[!is.na(x)]
xg <- exp(mean(log(xc[xc>0])))
xg <- round(xg)
return(xg)
}
### Data Prep ----
data_1 <- data_1 %>%
mutate(Lake_County = paste(Lake, County)) %>%
filter(Study == "LW") %>%
filter(County == "Charlotte") %>%
filter(`water type` == "Lake" | `water type` == "River/Stream" | `water type` == "Estuary")
head(data_1)
data_2 = data_2 %>%
mutate(Station = as.character(Station)) %>%
mutate(Lake_County = paste(Lake, County))
head(data_2)
#add na.ignore here to avoid loop error when no data exists for a lake
data_all <- data_1 %>% full_join(data_2, by = c("Lake_County", "Station"))
head(data_all)
### for loop with counter ----
#Run ONE of these two lines
#Lakes = unique(data_1$Lake_County)
Lakes = c("Pine Valley Weir Charlotte")
#"Westchester Pinellas",
#"Winston Pinellas")
print(Lakes)
n_count = 1
N_count = length(Lakes)
for(l in Lakes){
#subsets data for lake of interest
Lake_1 <- data_1 %>%
filter(Lake_County == l)
Lake_2 <- data_2 %>%
filter(Lake_County == l)
file_name = paste(Lake_2[1], ".pdf")
#adding a column using if/else for lake classification
##this code currently has no fallback for if the data is missing.
Lake_2 = Lake_2 %>% mutate(lake_class = ifelse(
gmean(`Color`) > 40, "Colored", ifelse(
gmean(`Color`) <= 40 & gmean(`Cond_uS`) <= 20, "Clear Soft Water","Clear Hard Water")))
#adding a column using if/else for trophic state
Lake_2 = Lake_2 %>% mutate(trophic_state = ifelse(
gmean(CHL) < 3, "Oligotrophic", ifelse(
gmean(CHL) >= 3 & gmean(CHL) < 7, "Mesotrophic", ifelse(
gmean(CHL) >= 7 & gmean(CHL) < 40, "Eutrophic", "Hypereutrophic"))))
if(Lake_1$`water type`[1] == "Lake") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code Lake.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/Lake",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Estuary") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code Estuary.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/Estuary",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "River/Stream") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code RiverStream.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/RiverStream",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
#counter
print(Lake_2$Lake_County[1])
print(paste(n_count, "/", N_count))
n_count <- n_count+1
}
# Project Notes ----
#
### WD and Packages ----
#setwd("/Documents/GitHub/LWreports/.RData")
library(tidyverse)
library(gt)
library(SciViews)
library(broom)
library(glue)
library(ggtext)
library(readxl)
library(tinytex)
#tinytex::install_tinytex()
#tinytex::tlmgr_update()
### Data Import ----
data_1 = read_xlsx("Data/Lakewatch Base File RMD.xlsx")
data_2 = read.csv("Data/All_Data_RMD.csv")
### Functions ----
gmean <- function(x){
xc <- x[!is.na(x)]
xg <- exp(mean(log(xc[xc>0])))
xg <- round(xg)
return(xg)
}
### Data Prep ----
data_1 <- data_1 %>%
mutate(Lake_County = paste(Lake, County)) %>%
filter(Study == "LW") %>%
filter(County == "Charlotte") %>%
filter(`water type` == "Lake" | `water type` == "River/Stream" | `water type` == "Estuary")
head(data_1)
data_2 = data_2 %>%
mutate(Station = as.character(Station)) %>%
mutate(Lake_County = paste(Lake, County))
head(data_2)
#add na.ignore here to avoid loop error when no data exists for a lake
data_all <- data_1 %>% full_join(data_2, by = c("Lake_County", "Station"))
head(data_all)
### for loop with counter ----
#Run ONE of these two lines
#Lakes = unique(data_1$Lake_County)
Lakes = c("Pine Valley Weir Charlotte")
#"Westchester Pinellas",
#"Winston Pinellas")
print(Lakes)
n_count = 1
N_count = length(Lakes)
for(l in Lakes){
#subsets data for lake of interest
Lake_1 <- data_1 %>%
filter(Lake_County == l)
Lake_2 <- data_2 %>%
filter(Lake_County == l)
file_name = paste(Lake_2[1], ".pdf")
#adding a column using if/else for lake classification
##this code currently has no fallback for if the data is missing.
Lake_2 = Lake_2 %>% mutate(lake_class = ifelse(
gmean(`Color`) > 40, "Colored", ifelse(
gmean(`Color`) <= 40 & gmean(`Cond_uS`) <= 20, "Clear Soft Water","Clear Hard Water")))
#adding a column using if/else for trophic state
Lake_2 = Lake_2 %>% mutate(trophic_state = ifelse(
gmean(CHL) < 3, "Oligotrophic", ifelse(
gmean(CHL) >= 3 & gmean(CHL) < 7, "Mesotrophic", ifelse(
gmean(CHL) >= 7 & gmean(CHL) < 40, "Eutrophic", "Hypereutrophic"))))
if(Lake_1$`water type`[1] == "Lake") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code Lake.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/Lake",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Estuary") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code Estuary.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/Estuary",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "River/Stream") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code RiverStream.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/RiverStream",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
#counter
print(Lake_2$Lake_County[1])
print(paste(n_count, "/", N_count))
n_count <- n_count+1
}
# Project Notes ----
#
### WD and Packages ----
#setwd("/Documents/GitHub/LWreports/.RData")
library(tidyverse)
library(gt)
library(SciViews)
library(broom)
library(glue)
library(ggtext)
library(readxl)
library(tinytex)
#tinytex::install_tinytex()
#tinytex::tlmgr_update()
### Data Import ----
data_1 = read_xlsx("Data/Lakewatch Base File RMD.xlsx")
data_2 = read.csv("Data/All_Data_RMD.csv")
### Functions ----
gmean <- function(x){
xc <- x[!is.na(x)]
xg <- exp(mean(log(xc[xc>0])))
xg <- round(xg)
return(xg)
}
### Data Prep ----
data_1 <- data_1 %>%
mutate(Lake_County = paste(Lake, County)) %>%
filter(Study == "LW") %>%
filter(County == "Charlotte") %>%
filter(`water type` == "Lake" | `water type` == "River/Stream" | `water type` == "Estuary")
head(data_1)
data_2 = data_2 %>%
mutate(Station = as.character(Station)) %>%
mutate(Lake_County = paste(Lake, County))
head(data_2)
#add na.ignore here to avoid loop error when no data exists for a lake
data_all <- data_1 %>% full_join(data_2, by = c("Lake_County", "Station"))
head(data_all)
### for loop with counter ----
#Run ONE of these two lines
Lakes = unique(data_1$Lake_County)
#Lakes = c("Pine Valley Weir Charlotte")
#"Westchester Pinellas",
#"Winston Pinellas")
print(Lakes)
n_count = 1
N_count = length(Lakes)
for(l in Lakes){
#subsets data for lake of interest
Lake_1 <- data_1 %>%
filter(Lake_County == l)
Lake_2 <- data_2 %>%
filter(Lake_County == l)
file_name = paste(Lake_2[1], ".pdf")
#adding a column using if/else for lake classification
##this code currently has no fallback for if the data is missing.
Lake_2 = Lake_2 %>% mutate(lake_class = ifelse(
gmean(`Color`) > 40, "Colored", ifelse(
gmean(`Color`) <= 40 & gmean(`Cond_uS`) <= 20, "Clear Soft Water","Clear Hard Water")))
#adding a column using if/else for trophic state
Lake_2 = Lake_2 %>% mutate(trophic_state = ifelse(
gmean(CHL) < 3, "Oligotrophic", ifelse(
gmean(CHL) >= 3 & gmean(CHL) < 7, "Mesotrophic", ifelse(
gmean(CHL) >= 7 & gmean(CHL) < 40, "Eutrophic", "Hypereutrophic"))))
if(Lake_1$`water type`[1] == "Lake") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code Lake.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/Lake",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "Estuary") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code Estuary.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/Estuary",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
if(Lake_1$`water type`[1] == "River/Stream") {
rmarkdown::render(input = "Scripts/LWReport Markdown Code RiverStream.Rmd", output_format = "pdf_document",         # 2. Establish the format
output_file = paste0(l ,"_report.pdf"), # 3. Define the output file name
output_dir = "Output/RiverStream",                       # 4. Define an output folder/directory
params = list(Lakes = l))  }
#counter
print(Lake_2$Lake_County[1])
print(paste(n_count, "/", N_count))
n_count <- n_count+1
}
